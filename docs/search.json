[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Import required libraries",
    "section": "",
    "text": "Import required libraries\npackages &lt;- c(“tm”, “proxy”,“httr”,“jsonlite”,“tidyverse”, “readxl”,“magrittr”, “kableExtra” ,“tibble”,“knitr”, “here”,“openxlsx”)\nfor (package in packages) { if (!(package %in% installed.packages())) { install.packages(package) }\n# Load the package library(package, character.only = TRUE) }\n\n\nSource required functions\nsource(“../code/Functions/data_retrieval.R”) # Sourcing the data retrieval functions source(“../code/Functions/data_analysis.R”) # Sourcing the data analysis functions source(“../code/Functions/data_visualization.R”) # Sourcing the data visualization functions source(“../code/Functions/utils.R”) # Sourcing utility functions\n\n\nRequired datasets\ndata_dir &lt;- here(“data”)"
  },
  {
    "objectID": "02_data_exploration.html",
    "href": "02_data_exploration.html",
    "title": "Explore data retrieved from SEC",
    "section": "",
    "text": "In this section, we delve into the structure of the SEC data obtained from the API. The data follows a structured format in compliance with SEC reporting standards, and understanding this structure is vital for effective analysis.\nFirst, we load the required libraries and files.\n\n\nCode\nsource(\"setup.qmd\")          \n\n\nNow, let’s retrieve the necessary objects for data exploration:\n\n\nCode\n# Load company_Data\ncompany_Data &lt;- readRDS(\"company_data.RDS\")\ncik &lt;- readRDS(\"cik.RDS\")\n\n\n\n\nThe data retrieved from the SEC API is structured financial data compliant with SEC reporting standards. It utilizes XBRL (eXtensible Business Reporting Language)1, a structured, machine-readable format ensuring consistency and comparability across companies and filings.\nTo navigate through this structure for analysis, consider the following key elements:\n\ncik: The Central Index Key (CIK) is a unique identifier assigned to each company filing reports with the U.S. Securities and Exchange Commission (SEC).\nentityName: This is the name of the company, such as “Apple Inc.”\nfacts: The main container for financial data, housing two critical sections:\n\ndei: Contains Document and Entity Information (DEI), providing basic company details.\nus-gaap: Holds financial data following the U.S. Generally Accepted Accounting Principles (GAAP).\n\n\nWithin these sections, financial data is organized as a list of items, each with specific attributes:\n\nConcept: Represents a financial measure or item (e.g., “Assets”) with an associated label and data type.\nFacts: Actual numerical values associated with the concept, with attributes like “value,” “unitRef,” and “contextRef.”\nAttributes: Additional attributes providing context for the data, such as reporting period, currency unit, or data precision.\n\nEffectively analyzing this data involves selecting relevant concepts and Fact, potentially transforming or pivoting the data for further processing and visualization.\n\n\nLet’s start by exploring the structure of company_Data:\n\n\nCode\n# Visualize structure of the company_Data \nstr(company_Data, max.level = 1)\n\n\nList of 3\n $ company_Metadata:List of 22\n $ company_Facts   :List of 3\n $ company_Concept :List of 7\n\n\nThe output reveals that company_Data structure comprises three lists with nested lists, such as company_Metadata with 22 lists.\n\n\n\n\n\n\n\nNote\n\n\nIn R, a list is a powerful data structure that can hold elements of different data types. This flexibility allows each element to be unique and cater to specific data requirements.\n\n\nFor the company_Data object, the list structure plays a crucial role in organizing various pieces of information, including financial data, company descriptions, and filing details. This heterogeneous nature of the data necessitates a flexible data structure like a list to accommodate these diverse data types.\n\n\nUnderstanding the organization and structure of the company_Data list is essential for effective navigation and extraction of specific information. By grasping the relationships between the list elements, users can efficiently retrieve the desired data elements for analysis and interpretation.\n\n\n\n\nTo access the lists we use the symbol $ in after the object e.g. company_Data$company_Metadata.\nNext, we split the company_Data into separate lists: company_Metadata, company_Facts, company_Concept.\n\n\nCode\n# Split the lists in company_Data\ncompany_Metadata &lt;- company_Data$company_Metadata\ncompany_Facts &lt;- company_Data$company_Facts\ncompany_Concept &lt;- company_Data$company_Concept\n\n\nNow, let’s examine the structures and content of these lists:\n\n\nLet’s start with company_Metadata which includes 22 elements: characters, integer, sub-list (or nested list), etc.\n\n\nCode\n# Visualize structure of the company_Metadata\nstr(company_Metadata, max.level = 1)\n\n\nList of 22\n $ cik                              : chr \"1009829\"\n $ entityType                       : chr \"operating\"\n $ sic                              : chr \"3944\"\n $ sicDescription                   : chr \"Games, Toys & Children's Vehicles (No Dolls & Bicycles)\"\n $ insiderTransactionForOwnerExists : int 0\n $ insiderTransactionForIssuerExists: int 1\n $ name                             : chr \"JAKKS PACIFIC INC\"\n $ tickers                          : chr [1:2] \"JAKK\" \"JAKP\"\n $ exchanges                        : chr [1:2] \"Nasdaq\" \"OTC\"\n $ ein                              : chr \"954527222\"\n $ description                      : chr \"\"\n $ website                          : chr \"\"\n $ investorWebsite                  : chr \"\"\n $ category                         : chr \"Non-accelerated filer&lt;br&gt;Smaller reporting company\"\n $ fiscalYearEnd                    : chr \"1231\"\n $ stateOfIncorporation             : chr \"DE\"\n $ stateOfIncorporationDescription  : chr \"DE\"\n $ addresses                        :List of 2\n $ phone                            : chr \"424-268-9444\"\n $ flags                            : chr \"\"\n $ formerNames                      : list()\n $ filings                          :List of 2\n\n\nFor our purpose, the most relevant information of company_Metadata are included in the elemnent filing which is a nested list and contains the filing attributes. Here the structure of company_Metadata:\n\n\nCode\n# Visualize structure of the company_Metadata\nstr(company_Metadata$filing, max.level = 2)\n\n\nList of 2\n $ recent:List of 14\n  ..$ accessionNumber      : chr [1:1000] \"0001185185-23-001232\" \"0001185185-23-001194\" \"0001185185-23-001154\" \"0001185185-23-001142\" ...\n  ..$ filingDate           : chr [1:1000] \"2023-11-22\" \"2023-11-14\" \"2023-11-09\" \"2023-11-03\" ...\n  ..$ reportDate           : chr [1:1000] \"2023-11-20\" \"2023-09-30\" \"\" \"2023-12-15\" ...\n  ..$ acceptanceDateTime   : chr [1:1000] \"2023-11-22T08:00:21.000Z\" \"2023-11-14T15:37:25.000Z\" \"2023-11-08T18:02:08.000Z\" \"2023-11-03T16:53:20.000Z\" ...\n  ..$ act                  : chr [1:1000] \"\" \"34\" \"34\" \"34\" ...\n  ..$ form                 : chr [1:1000] \"4\" \"10-Q\" \"DEFR14A\" \"DEF 14A\" ...\n  ..$ fileNumber           : chr [1:1000] \"\" \"001-35448\" \"001-35448\" \"001-35448\" ...\n  ..$ filmNumber           : chr [1:1000] \"\" \"231405279\" \"231389465\" \"231377115\" ...\n  ..$ items                : chr [1:1000] \"\" \"\" \"\" \"\" ...\n  ..$ size                 : int [1:1000] 9905 6541114 885640 871257 872244 6302419 861605 179689 5468658 147552 ...\n  ..$ isXBRL               : int [1:1000] 0 1 0 0 1 1 1 1 1 0 ...\n  ..$ isInlineXBRL         : int [1:1000] 0 1 0 0 1 1 1 1 1 0 ...\n  ..$ primaryDocument      : chr [1:1000] \"xslF345X05/ownership.xml\" \"jakkspacif20230930_10q.htm\" \"jakkspacif20231107_defr14a.htm\" \"jakkspacif20231102_def14a.htm\" ...\n  ..$ primaryDocDescription: chr [1:1000] \"\" \"FORM 10-Q\" \"FORM DEFR14A\" \"FORM DEF 14A\" ...\n $ files :'data.frame': 1 obs. of  4 variables:\n  ..$ name       : chr \"CIK0001009829-submissions-001.json\"\n  ..$ filingCount: int 123\n  ..$ filingFrom : chr \"1996-06-07\"\n  ..$ filingTo   : chr \"2002-09-29\"\n\n\nThe format of the dataset as printed is not very useful. We see that there are useful information on the forms (e.g. 10K) and dates (e.g. filing dates).\nFor now we will keep it as is and we will come back later on how to improve the readibility\n\n\n\ncompany_Facts is relatively simple and is a list of 3 elements.\n\n\nCode\n# Visualize structure of the company_Facts\nstr(company_Facts, max.level = 1)\n\n\nList of 3\n $ cik       : int 1009829\n $ entityName: chr \"JAKKS Pacific, Inc.\"\n $ facts     :List of 2\n\n\nFor our purpose, the last element company_Facts$facts is the most relevant one.\n\n\nCode\n# Visualize structure of the company_Facts\nstr(company_Facts$facts, max.level = 1)\n\n\nList of 2\n $ dei    :List of 2\n $ us-gaap:List of 487\n\n\nThe us-gaap list includes relevant Facts, containing 498 nested elements. Let’s examine the first five.\n\n\nCode\n# Visualize structure of the company_Facts\nFacts_us_gaap &lt;- str(company_Facts$facts$`us-gaap`[1:5], max.level = 1)\n\n\nList of 5\n $ AccountsPayableCurrent        :List of 3\n $ AccountsReceivableNetCurrent  :List of 3\n $ AccruedAdvertisingCurrent     :List of 3\n $ AccruedBonusesCurrent         :List of 3\n $ AccruedEmployeeBenefitsCurrent:List of 3\n\n\nThese elements include essential fundamentals of the company and are themselves nested lists. Let’s explore the structure of the first one.\n\n\nCode\n# Visualize structure of the company_Facts\nstr(company_Facts$facts$`us-gaap`[1], max.level = 4)\n\n\nList of 1\n $ AccountsPayableCurrent:List of 3\n  ..$ label      : chr \"Accounts Payable, Current\"\n  ..$ description: chr \"Carrying value as of the balance sheet date of liabilities incurred (and for which invoices have typically been\"| __truncated__\n  ..$ units      :List of 1\n  .. ..$ USD:'data.frame':  102 obs. of  8 variables:\n  .. .. ..$ end  : chr [1:102] \"2010-12-31\" \"2010-12-31\" \"2010-12-31\" \"2011-06-30\" ...\n  .. .. ..$ val  : int [1:102] 35886000 35886000 35886000 51537000 85352000 26430000 26430000 26430000 26430000 26430000 ...\n  .. .. ..$ accn : chr [1:102] \"0001157523-11-004475\" \"0001157523-11-006668\" \"0001157523-12-001404\" \"0001157523-11-004475\" ...\n  .. .. ..$ fy   : int [1:102] 2011 2011 2011 2011 2011 2011 2012 2012 2012 2012 ...\n  .. .. ..$ fp   : chr [1:102] \"Q2\" \"Q3\" \"FY\" \"Q2\" ...\n  .. .. ..$ form : chr [1:102] \"10-Q\" \"10-Q\" \"10-K\" \"10-Q\" ...\n  .. .. ..$ filed: chr [1:102] \"2011-08-01\" \"2011-11-09\" \"2012-03-15\" \"2011-08-01\" ...\n  .. .. ..$ frame: chr [1:102] NA NA \"CY2010Q4I\" \"CY2011Q2I\" ...\n\n\nThe output presents the structure of the information related to the first element: AccountsPayable\n\nAccountsPayable: Represents a financial concept within the us-gaap section, specifically referring to “Accounts Payable (Deprecated 2009-01-31).”\n\nlabel: This column represents the financial concept or measure, such as “Accounts Payable (Deprecated 2009-01-31).”\ndescription: A detailed explanation of the concept, providing insight into the carrying value as of the balance sheet date.\nunits: A data frame with 2 observations and 8 variables. The variables include information such as:\n\nend: Indicates the end date of the reporting period associated with the financial data.\nval: Represents the numerical value associated with the financial concept. It includes the unit of measure (e.g., million - “M”).\naccn: Stands for accession number, a unique identifier assigned by the SEC to each submission.\nfy: Represents the fiscal year associated with the financial data\nfp: Represents the fiscal period (e.g., Q3 for the third quarter, FY for the full fiscal year).\nform: Indicates the type of form filed with the SEC (e.g., 10-Q for quarterly reports, 10-K for annual reports).\nfiled: Represents the date on which the form was filed with the SEC.\nframe Provides information about the frame, and in this case, it appears to be a combination of calendar year, fiscal quarter, and an additional identifier. For instance “CY2008Q3I” suggests a possible combination of calendar year (CY), year (2008), fiscal quarter (Q3), and possibly an additional identifier (“I”)\n\n\n\nThis hierarchical structure provides a detailed view of the financial concept “Accounts Payable (Deprecated 2009-01-31)” within the us-gaap section, including its label, description, and historical data with unit details.\n\n\nMost of the SEC data required for fundamentals analysis is included in a structure of nested lists. Its understanding is critical to properly retrieve the data. Once we automate the process of “un-nesting” the lists, we will be able to verify that this process led to a dataframe structure where the data is properly located.\n\n\n\n\n\nFinally, let’s examine the structure associated with the company’s Concept.\n\n\nCode\n# Visualize structure of the company_Concepts\nstr(company_Concept, max.level = 3)\n\n\nList of 7\n $ cik        : int 1009829\n $ taxonomy   : chr \"us-gaap\"\n $ tag        : chr \"Assets\"\n $ label      : chr \"Assets\"\n $ description: chr \"Sum of the carrying amounts as of the balance sheet date of all assets that are recognized. Assets are probable\"| __truncated__\n $ entityName : chr \"JAKKS Pacific, Inc.\"\n $ units      :List of 1\n  ..$ USD:'data.frame': 103 obs. of  8 variables:\n  .. ..$ end  : chr [1:103] \"2010-12-31\" \"2010-12-31\" \"2010-12-31\" \"2011-06-30\" ...\n  .. ..$ val  : int [1:103] 633406000 633406000 633406000 614892000 707611000 615234000 615234000 615234000 615234000 615234000 ...\n  .. ..$ accn : chr [1:103] \"0001157523-11-004475\" \"0001157523-11-006668\" \"0001157523-12-001404\" \"0001157523-11-004475\" ...\n  .. ..$ fy   : int [1:103] 2011 2011 2011 2011 2011 2011 2012 2012 2012 2012 ...\n  .. ..$ fp   : chr [1:103] \"Q2\" \"Q3\" \"FY\" \"Q2\" ...\n  .. ..$ form : chr [1:103] \"10-Q\" \"10-Q\" \"10-K\" \"10-Q\" ...\n  .. ..$ filed: chr [1:103] \"2011-08-01\" \"2011-11-09\" \"2012-03-15\" \"2011-08-01\" ...\n  .. ..$ frame: chr [1:103] NA NA \"CY2010Q4I\" \"CY2011Q2I\" ...\n\n\nThe output shows the structure associated with the Asset of the company under the taxonomy of us-gaap."
  },
  {
    "objectID": "02_data_exploration.html#structure-of-the-sec-data-xbrl",
    "href": "02_data_exploration.html#structure-of-the-sec-data-xbrl",
    "title": "Explore data retrieved from SEC",
    "section": "",
    "text": "The data retrieved from the SEC API is structured financial data compliant with SEC reporting standards. It utilizes XBRL (eXtensible Business Reporting Language)1, a structured, machine-readable format ensuring consistency and comparability across companies and filings.\nTo navigate through this structure for analysis, consider the following key elements:\n\ncik: The Central Index Key (CIK) is a unique identifier assigned to each company filing reports with the U.S. Securities and Exchange Commission (SEC).\nentityName: This is the name of the company, such as “Apple Inc.”\nfacts: The main container for financial data, housing two critical sections:\n\ndei: Contains Document and Entity Information (DEI), providing basic company details.\nus-gaap: Holds financial data following the U.S. Generally Accepted Accounting Principles (GAAP).\n\n\nWithin these sections, financial data is organized as a list of items, each with specific attributes:\n\nConcept: Represents a financial measure or item (e.g., “Assets”) with an associated label and data type.\nFacts: Actual numerical values associated with the concept, with attributes like “value,” “unitRef,” and “contextRef.”\nAttributes: Additional attributes providing context for the data, such as reporting period, currency unit, or data precision.\n\nEffectively analyzing this data involves selecting relevant concepts and Fact, potentially transforming or pivoting the data for further processing and visualization.\n\n\nLet’s start by exploring the structure of company_Data:\n\n\nCode\n# Visualize structure of the company_Data \nstr(company_Data, max.level = 1)\n\n\nList of 3\n $ company_Metadata:List of 22\n $ company_Facts   :List of 3\n $ company_Concept :List of 7\n\n\nThe output reveals that company_Data structure comprises three lists with nested lists, such as company_Metadata with 22 lists.\n\n\n\n\n\n\n\nNote\n\n\nIn R, a list is a powerful data structure that can hold elements of different data types. This flexibility allows each element to be unique and cater to specific data requirements.\n\n\nFor the company_Data object, the list structure plays a crucial role in organizing various pieces of information, including financial data, company descriptions, and filing details. This heterogeneous nature of the data necessitates a flexible data structure like a list to accommodate these diverse data types.\n\n\nUnderstanding the organization and structure of the company_Data list is essential for effective navigation and extraction of specific information. By grasping the relationships between the list elements, users can efficiently retrieve the desired data elements for analysis and interpretation.\n\n\n\n\nTo access the lists we use the symbol $ in after the object e.g. company_Data$company_Metadata.\nNext, we split the company_Data into separate lists: company_Metadata, company_Facts, company_Concept.\n\n\nCode\n# Split the lists in company_Data\ncompany_Metadata &lt;- company_Data$company_Metadata\ncompany_Facts &lt;- company_Data$company_Facts\ncompany_Concept &lt;- company_Data$company_Concept\n\n\nNow, let’s examine the structures and content of these lists:\n\n\nLet’s start with company_Metadata which includes 22 elements: characters, integer, sub-list (or nested list), etc.\n\n\nCode\n# Visualize structure of the company_Metadata\nstr(company_Metadata, max.level = 1)\n\n\nList of 22\n $ cik                              : chr \"1009829\"\n $ entityType                       : chr \"operating\"\n $ sic                              : chr \"3944\"\n $ sicDescription                   : chr \"Games, Toys & Children's Vehicles (No Dolls & Bicycles)\"\n $ insiderTransactionForOwnerExists : int 0\n $ insiderTransactionForIssuerExists: int 1\n $ name                             : chr \"JAKKS PACIFIC INC\"\n $ tickers                          : chr [1:2] \"JAKK\" \"JAKP\"\n $ exchanges                        : chr [1:2] \"Nasdaq\" \"OTC\"\n $ ein                              : chr \"954527222\"\n $ description                      : chr \"\"\n $ website                          : chr \"\"\n $ investorWebsite                  : chr \"\"\n $ category                         : chr \"Non-accelerated filer&lt;br&gt;Smaller reporting company\"\n $ fiscalYearEnd                    : chr \"1231\"\n $ stateOfIncorporation             : chr \"DE\"\n $ stateOfIncorporationDescription  : chr \"DE\"\n $ addresses                        :List of 2\n $ phone                            : chr \"424-268-9444\"\n $ flags                            : chr \"\"\n $ formerNames                      : list()\n $ filings                          :List of 2\n\n\nFor our purpose, the most relevant information of company_Metadata are included in the elemnent filing which is a nested list and contains the filing attributes. Here the structure of company_Metadata:\n\n\nCode\n# Visualize structure of the company_Metadata\nstr(company_Metadata$filing, max.level = 2)\n\n\nList of 2\n $ recent:List of 14\n  ..$ accessionNumber      : chr [1:1000] \"0001185185-23-001232\" \"0001185185-23-001194\" \"0001185185-23-001154\" \"0001185185-23-001142\" ...\n  ..$ filingDate           : chr [1:1000] \"2023-11-22\" \"2023-11-14\" \"2023-11-09\" \"2023-11-03\" ...\n  ..$ reportDate           : chr [1:1000] \"2023-11-20\" \"2023-09-30\" \"\" \"2023-12-15\" ...\n  ..$ acceptanceDateTime   : chr [1:1000] \"2023-11-22T08:00:21.000Z\" \"2023-11-14T15:37:25.000Z\" \"2023-11-08T18:02:08.000Z\" \"2023-11-03T16:53:20.000Z\" ...\n  ..$ act                  : chr [1:1000] \"\" \"34\" \"34\" \"34\" ...\n  ..$ form                 : chr [1:1000] \"4\" \"10-Q\" \"DEFR14A\" \"DEF 14A\" ...\n  ..$ fileNumber           : chr [1:1000] \"\" \"001-35448\" \"001-35448\" \"001-35448\" ...\n  ..$ filmNumber           : chr [1:1000] \"\" \"231405279\" \"231389465\" \"231377115\" ...\n  ..$ items                : chr [1:1000] \"\" \"\" \"\" \"\" ...\n  ..$ size                 : int [1:1000] 9905 6541114 885640 871257 872244 6302419 861605 179689 5468658 147552 ...\n  ..$ isXBRL               : int [1:1000] 0 1 0 0 1 1 1 1 1 0 ...\n  ..$ isInlineXBRL         : int [1:1000] 0 1 0 0 1 1 1 1 1 0 ...\n  ..$ primaryDocument      : chr [1:1000] \"xslF345X05/ownership.xml\" \"jakkspacif20230930_10q.htm\" \"jakkspacif20231107_defr14a.htm\" \"jakkspacif20231102_def14a.htm\" ...\n  ..$ primaryDocDescription: chr [1:1000] \"\" \"FORM 10-Q\" \"FORM DEFR14A\" \"FORM DEF 14A\" ...\n $ files :'data.frame': 1 obs. of  4 variables:\n  ..$ name       : chr \"CIK0001009829-submissions-001.json\"\n  ..$ filingCount: int 123\n  ..$ filingFrom : chr \"1996-06-07\"\n  ..$ filingTo   : chr \"2002-09-29\"\n\n\nThe format of the dataset as printed is not very useful. We see that there are useful information on the forms (e.g. 10K) and dates (e.g. filing dates).\nFor now we will keep it as is and we will come back later on how to improve the readibility\n\n\n\ncompany_Facts is relatively simple and is a list of 3 elements.\n\n\nCode\n# Visualize structure of the company_Facts\nstr(company_Facts, max.level = 1)\n\n\nList of 3\n $ cik       : int 1009829\n $ entityName: chr \"JAKKS Pacific, Inc.\"\n $ facts     :List of 2\n\n\nFor our purpose, the last element company_Facts$facts is the most relevant one.\n\n\nCode\n# Visualize structure of the company_Facts\nstr(company_Facts$facts, max.level = 1)\n\n\nList of 2\n $ dei    :List of 2\n $ us-gaap:List of 487\n\n\nThe us-gaap list includes relevant Facts, containing 498 nested elements. Let’s examine the first five.\n\n\nCode\n# Visualize structure of the company_Facts\nFacts_us_gaap &lt;- str(company_Facts$facts$`us-gaap`[1:5], max.level = 1)\n\n\nList of 5\n $ AccountsPayableCurrent        :List of 3\n $ AccountsReceivableNetCurrent  :List of 3\n $ AccruedAdvertisingCurrent     :List of 3\n $ AccruedBonusesCurrent         :List of 3\n $ AccruedEmployeeBenefitsCurrent:List of 3\n\n\nThese elements include essential fundamentals of the company and are themselves nested lists. Let’s explore the structure of the first one.\n\n\nCode\n# Visualize structure of the company_Facts\nstr(company_Facts$facts$`us-gaap`[1], max.level = 4)\n\n\nList of 1\n $ AccountsPayableCurrent:List of 3\n  ..$ label      : chr \"Accounts Payable, Current\"\n  ..$ description: chr \"Carrying value as of the balance sheet date of liabilities incurred (and for which invoices have typically been\"| __truncated__\n  ..$ units      :List of 1\n  .. ..$ USD:'data.frame':  102 obs. of  8 variables:\n  .. .. ..$ end  : chr [1:102] \"2010-12-31\" \"2010-12-31\" \"2010-12-31\" \"2011-06-30\" ...\n  .. .. ..$ val  : int [1:102] 35886000 35886000 35886000 51537000 85352000 26430000 26430000 26430000 26430000 26430000 ...\n  .. .. ..$ accn : chr [1:102] \"0001157523-11-004475\" \"0001157523-11-006668\" \"0001157523-12-001404\" \"0001157523-11-004475\" ...\n  .. .. ..$ fy   : int [1:102] 2011 2011 2011 2011 2011 2011 2012 2012 2012 2012 ...\n  .. .. ..$ fp   : chr [1:102] \"Q2\" \"Q3\" \"FY\" \"Q2\" ...\n  .. .. ..$ form : chr [1:102] \"10-Q\" \"10-Q\" \"10-K\" \"10-Q\" ...\n  .. .. ..$ filed: chr [1:102] \"2011-08-01\" \"2011-11-09\" \"2012-03-15\" \"2011-08-01\" ...\n  .. .. ..$ frame: chr [1:102] NA NA \"CY2010Q4I\" \"CY2011Q2I\" ...\n\n\nThe output presents the structure of the information related to the first element: AccountsPayable\n\nAccountsPayable: Represents a financial concept within the us-gaap section, specifically referring to “Accounts Payable (Deprecated 2009-01-31).”\n\nlabel: This column represents the financial concept or measure, such as “Accounts Payable (Deprecated 2009-01-31).”\ndescription: A detailed explanation of the concept, providing insight into the carrying value as of the balance sheet date.\nunits: A data frame with 2 observations and 8 variables. The variables include information such as:\n\nend: Indicates the end date of the reporting period associated with the financial data.\nval: Represents the numerical value associated with the financial concept. It includes the unit of measure (e.g., million - “M”).\naccn: Stands for accession number, a unique identifier assigned by the SEC to each submission.\nfy: Represents the fiscal year associated with the financial data\nfp: Represents the fiscal period (e.g., Q3 for the third quarter, FY for the full fiscal year).\nform: Indicates the type of form filed with the SEC (e.g., 10-Q for quarterly reports, 10-K for annual reports).\nfiled: Represents the date on which the form was filed with the SEC.\nframe Provides information about the frame, and in this case, it appears to be a combination of calendar year, fiscal quarter, and an additional identifier. For instance “CY2008Q3I” suggests a possible combination of calendar year (CY), year (2008), fiscal quarter (Q3), and possibly an additional identifier (“I”)\n\n\n\nThis hierarchical structure provides a detailed view of the financial concept “Accounts Payable (Deprecated 2009-01-31)” within the us-gaap section, including its label, description, and historical data with unit details.\n\n\nMost of the SEC data required for fundamentals analysis is included in a structure of nested lists. Its understanding is critical to properly retrieve the data. Once we automate the process of “un-nesting” the lists, we will be able to verify that this process led to a dataframe structure where the data is properly located.\n\n\n\n\n\nFinally, let’s examine the structure associated with the company’s Concept.\n\n\nCode\n# Visualize structure of the company_Concepts\nstr(company_Concept, max.level = 3)\n\n\nList of 7\n $ cik        : int 1009829\n $ taxonomy   : chr \"us-gaap\"\n $ tag        : chr \"Assets\"\n $ label      : chr \"Assets\"\n $ description: chr \"Sum of the carrying amounts as of the balance sheet date of all assets that are recognized. Assets are probable\"| __truncated__\n $ entityName : chr \"JAKKS Pacific, Inc.\"\n $ units      :List of 1\n  ..$ USD:'data.frame': 103 obs. of  8 variables:\n  .. ..$ end  : chr [1:103] \"2010-12-31\" \"2010-12-31\" \"2010-12-31\" \"2011-06-30\" ...\n  .. ..$ val  : int [1:103] 633406000 633406000 633406000 614892000 707611000 615234000 615234000 615234000 615234000 615234000 ...\n  .. ..$ accn : chr [1:103] \"0001157523-11-004475\" \"0001157523-11-006668\" \"0001157523-12-001404\" \"0001157523-11-004475\" ...\n  .. ..$ fy   : int [1:103] 2011 2011 2011 2011 2011 2011 2012 2012 2012 2012 ...\n  .. ..$ fp   : chr [1:103] \"Q2\" \"Q3\" \"FY\" \"Q2\" ...\n  .. ..$ form : chr [1:103] \"10-Q\" \"10-Q\" \"10-K\" \"10-Q\" ...\n  .. ..$ filed: chr [1:103] \"2011-08-01\" \"2011-11-09\" \"2012-03-15\" \"2011-08-01\" ...\n  .. ..$ frame: chr [1:103] NA NA \"CY2010Q4I\" \"CY2011Q2I\" ...\n\n\nThe output shows the structure associated with the Asset of the company under the taxonomy of us-gaap."
  },
  {
    "objectID": "02_data_exploration.html#footnotes",
    "href": "02_data_exploration.html#footnotes",
    "title": "Explore data retrieved from SEC",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe definitions provided on this website are crafted for non-practitioners and may lack the rigor and precision required by experts. For a more thorough understanding of XBRL financial reporting, we recommend referring to XBRL-based structured digital financial reporting where you can find a comprehensive and rigorous explanation. To delve deeper into the subject, we suggest reading the following authoritative texts: Essentials of XBRL-based Digital Financial Reporting and Mastering XBRL-based Digital Financial Reporting by C. Hoffman.↩︎"
  },
  {
    "objectID": "05_advanced_topics.html",
    "href": "05_advanced_topics.html",
    "title": "Advanced Topics",
    "section": "",
    "text": "Advanced Topics\nWork in progress [..]"
  },
  {
    "objectID": "A2_Functions.html",
    "href": "A2_Functions.html",
    "title": "R script: Functions",
    "section": "",
    "text": "R script: Functions\nWork in progress [..]"
  },
  {
    "objectID": "04_data_visualization.html",
    "href": "04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Data Visualization\nWork in progress [..]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Unveiling Financial Insights: Retrieving SEC Data",
    "section": "",
    "text": "Welcome to the first chapter of our journey into SEC data analysis! In this section, we embark on the exciting process of retrieving financial data from the U.S. Securities and Exchange Commission (SEC) filings using the power of R.\n\n\n\nThis financial data retrieval code is provided for informational purposes only, and we make no warranties regarding the accuracy, completeness, or timeliness of the data. It should not be considered financial advice, and users should consult with qualified professionals for personalized guidance. Data is obtained from various sources, including the SEC, and we do not guarantee its accuracy or availability. Users are responsible for assessing and managing risks associated with the financial data. We are not liable for any damages arising from the use of this data or code. Redistribution, resale, or republication of the data without authorization is prohibited. This disclaimer is subject to change, and users are responsible for staying updated. It is not legal advice, and compliance with applicable laws and regulations is the user’s responsibility."
  },
  {
    "objectID": "index.html#dive-into-the-world-of-sec-filings",
    "href": "index.html#dive-into-the-world-of-sec-filings",
    "title": "Unveiling Financial Insights: Retrieving SEC Data",
    "section": "",
    "text": "Welcome to the first chapter of our journey into SEC data analysis! In this section, we embark on the exciting process of retrieving financial data from the U.S. Securities and Exchange Commission (SEC) filings using the power of R."
  },
  {
    "objectID": "index.html#disclaimer",
    "href": "index.html#disclaimer",
    "title": "Unveiling Financial Insights: Retrieving SEC Data",
    "section": "",
    "text": "This financial data retrieval code is provided for informational purposes only, and we make no warranties regarding the accuracy, completeness, or timeliness of the data. It should not be considered financial advice, and users should consult with qualified professionals for personalized guidance. Data is obtained from various sources, including the SEC, and we do not guarantee its accuracy or availability. Users are responsible for assessing and managing risks associated with the financial data. We are not liable for any damages arising from the use of this data or code. Redistribution, resale, or republication of the data without authorization is prohibited. This disclaimer is subject to change, and users are responsible for staying updated. It is not legal advice, and compliance with applicable laws and regulations is the user’s responsibility."
  },
  {
    "objectID": "03_data_analysis.html",
    "href": "03_data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "First, we load the required libraries and files.\n\n\nCode\nsource(\"setup.qmd\")          \n\n\nNow, let’s retrieve the necessary objects for data exploration:\n\n\nCode\n# Load company_Data\ncompany_Data &lt;- readRDS(\"company_data.RDS\")\ncik &lt;- readRDS(\"cik.RDS\")\n\n# Split the lists in company_Data\ncompany_Metadata &lt;- company_Data$company_Metadata\ncompany_Facts &lt;- company_Data$company_Facts\ncompany_Concept &lt;- company_Data$company_Concept\n\n\n\n\nThe use of specific labels to indicate financial report items is regulated by accounting standards set forth by authoritative bodies. In the United States, the Financial Accounting Standards Board (FASB) establishes generally accepted accounting principles (GAAP), which provide guidelines for the preparation of financial statements, including the standardization of labels and concepts.\nDifferent comapnies may use different reporting styles to indicate Facts in different ways. The use of different labels however affect our ability to efficiently retrieve the appropriate financial data.\nThe objective here is to generate standardized financial reports of Balance sheet, Income Statement, Cash Flow that so that we can use the same label to perform specific calculation across all companies.\nLet’s create now a dataframe including the data retrieved from company_Facts$facts$`us-gaap`.\n\n\nThe first step is un-nest the dataset, in particular the financial data, in company_Facts, nested in various sub-lists.\nThe following code can be used to un-nest the list within company_Facts and create a dataframe easy to visualize and useful for our purpose1.\n\n\nCode\ndf_Facts &lt;- FactsList_to_Dataframe(company_Facts$facts$`us-gaap`)\n\n# Select the columns to print out and present the output with wrapped text and formatted numbers\ndf_Facts %&gt;% select(-c(description,accn)) %&gt;% \n  head() %&gt;% as.data.frame() %&gt;% \n  kable(\"html\") %&gt;% \n  kable_styling(full_width = FALSE)\n\n\n\n\n\nlabel\nend\nval\nfy\nfp\nform\nfiled\nframe\nstart\n\n\n\n\nAccounts Payable, Current\n2010-12-31\n35.886\n2011\nQ2\n10-Q\n2011-08-01\nNA\nNA\n\n\nAccounts Payable, Current\n2010-12-31\n35.886\n2011\nQ3\n10-Q\n2011-11-09\nNA\nNA\n\n\nAccounts Payable, Current\n2010-12-31\n35.886\n2011\nFY\n10-K\n2012-03-15\nCY2010Q4I\nNA\n\n\nAccounts Payable, Current\n2011-06-30\n51.537\n2011\nQ2\n10-Q\n2011-08-01\nCY2011Q2I\nNA\n\n\nAccounts Payable, Current\n2011-09-30\n85.352\n2011\nQ3\n10-Q\n2011-11-09\nCY2011Q3I\nNA\n\n\nAccounts Payable, Current\n2011-12-31\n26.430\n2011\nFY\n10-K\n2012-03-15\nNA\nNA\n\n\n\n\n\n\n\nNote that df_Facts$val is expressed in million.\nThe data in this dataframe is organized to facilitate analysis and comparison of financial information over different periods. Each row corresponds to a specific financial Concept (e.g. Accounts Payable) reported by the company, and the columns provide details about the reporting period, values, and other relevant attributes.\nTo recreate a financial statement from the data in df_Facts of JAKKS Pacific Inc., we need to extract the values of the various Concepts and corresponding date in df_Fact$end.\ndf_Fact has a long list of Concepts for multiple fiscal periods. The following code shows the large number of Concepts included in df_Fact, related to all financial reports.\n\n\nCode\n  # Print the size in human-readable format\ncat(\"df_Facts includes:\", format(nrow(df_Facts), units = \"auto\"), \"records \\n\")\n\n\ndf_Facts includes: 17258 records \n\n\nFrom the extract of the df_Facts above, we see repeated Concepts. Each of them is associated with a different fiscal period. The code next provides number of unique Concepts used historically JAKKS Pacific Inc. in their financial reports.\n\n\nCode\n# Print the number of unique records of df_Facts\ndf_Facts_distinct &lt;- df_Facts %&gt;% select(label,description) %&gt;% distinct()\n\ncat(\"df_Facts includes:\", format(nrow(df_Facts_distinct), units = \"auto\"), \"distinct Concepts \\n\")\n\n\ndf_Facts includes: 487 distinct Concepts \n\n\nBy arranging these records by date indicated in df_Fact$end we can see the the full financial reports for each period in a data frame format.\n\n\nCode\n# Group the df_Fact by date in df_Fact$end\ndf_Facts &lt;- df_Facts %&gt;% arrange(desc(end))\n\n# Show first rows of df_Facts_BS \ndf_Facts %&gt;%  select(-c(description,accn)) %&gt;% \n  head() %&gt;% as.data.frame() %&gt;% \n  kable(\"html\") %&gt;% \n  kable_styling(full_width = FALSE) %&gt;% \n  column_spec(1,width = \"250px\")\n\n\n\n\n\nlabel\nend\nval\nfy\nfp\nform\nfiled\nframe\nstart\n\n\n\n\nAccounts Payable, Current\n2023-09-30\n94.409\n2023\nQ3\n10-Q\n2023-11-14\nCY2023Q3I\nNA\n\n\nAccounts Receivable, after Allowance for Credit Loss, Current\n2023-09-30\n206.751\n2023\nQ3\n10-Q\n2023-11-14\nCY2023Q3I\nNA\n\n\nAccrued Income Taxes, Noncurrent\n2023-09-30\n2.994\n2023\nQ3\n10-Q\n2023-11-14\nCY2023Q3I\nNA\n\n\nAccrued Liabilities, Current\n2023-09-30\n65.609\n2023\nQ3\n10-Q\n2023-11-14\nCY2023Q3I\nNA\n\n\nAccumulated Depreciation, Depletion and Amortization, Property, Plant, and Equipment\n2023-09-30\n121.193\n2023\nQ3\n10-Q\n2023-11-14\nCY2023Q3I\nNA\n\n\nAccumulated Other Comprehensive Income (Loss), Net of Tax\n2023-09-30\n-16.808\n2023\nQ3\n10-Q\n2023-11-14\nCY2023Q3I\nNA\n\n\n\n\n\n\n\nThe next step is to filter the relevant Concepts associated with each key financial statement: Balance Sheet (BS), Income Statement (IS) Cash Flow (CF).\n\n\nNote\nAs mentioned in the previous chapter, the df_Facts dataframe contains financial data along with corresponding reporting information, such as df_Facts$end, df_Facts$fy, df_Facts$fp, and df_Facts$form. However, there are instances where a filing (e.g., 10-K) for a specific fiscal period (fy and fp) includes a comparison with previous fiscal periods. In these cases, the financial data may actually refer to a different period, as indicated by df_Facts$end, rather than the period specified by fy and fp.\nTo handle this scenario, we construct a dataframe of financial data based on the end date (df_Facts$end) of the reporting period and remove the remaining attributes such as fy, fp, etc. This ensures that we focus on the actual reporting period for the financial data.\n\n\n\n\n\nThe following code will create a standardized Balance Sheet (df_std_BS) based on a matching table prepopulated in excel (standardized_balancehseet.xlsx). There are instances in which the the filing (e.g. 10-K) of a specific fiscal period (df_Facts$fy and df_Facts$fp) include a comparison with previous fiscal periods. In these cases we refer to the end date df_Facts$end of the reporting period which is associated with the financial data.\n\n\nCode\n# Retrieve balance sheet of JAKKS Pacific Inc. in standardizeformat\n# df_std_BS &lt;- bs_std(df_Facts)\n\n# # Print the resulting data.frame\n# df_std_BS %&gt;% head() %&gt;% as.data.frame() %&gt;% \n#   kable(\"html\") %&gt;% \n#   kable_styling(\n#     full_width = TRUE,\n#     bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n#     font_size = 8  # Adjust the font size as needed\n#   ) %&gt;% \n#   column_spec(1, width = \"200px\")  # Adjust the width as needed for other columns\n\n\n\n\n\n(work in progress …)\n\n\n\n(work in progress …)"
  },
  {
    "objectID": "03_data_analysis.html#footnotes",
    "href": "03_data_analysis.html#footnotes",
    "title": "Data Analysis",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor visualization purpose we have omitted from the printed table below the variables (columns) df_Facts$description and df_Facts$accn.↩︎"
  },
  {
    "objectID": "01_data_retrieval.html",
    "href": "01_data_retrieval.html",
    "title": "Data Retrieval",
    "section": "",
    "text": "To kick things off, we need to import the essential libraries that will empower us to interact with the SEC’s data and perform insightful analysis. The magic happens when we source the necessary files via setup.qmd.\n\n\nTo start, we need to import the required libraries. These libraries provide functions and tools that enable us to interact with the SEC’s data and perform data analysis. The necessary libraries are listed in setup.qmd.\nThe data retrieval process is orchestrated using a set of functions located in separate R script files. We’ll be sourcing these files via setup.qmd to access the functions for retrieving, processing, and analyzing SEC data.\n\n\nCode\nsource(\"setup.qmd\")           # Sourcing necessary libraries\n\n\nThis sets the stage for retrieving and working with SEC data efficiently.\n\n\n\n\nIn this example, we will focus on one company, JAKKS Pacific Inc. (AAPL), as the target for our data retrieval.\n\n\nTo access the SEC API, we need to define user headers. These headers will be used for making HTTP requests to the SEC servers. We can set our user agent as an example:\n\n\nCode\n# Define user headers\nheaders &lt;- c('User-Agent' = 'email@address.com')\nkable(headers)\n\n\n\n\n\n\nx\n\n\n\n\nUser-Agent\nemail@address.com\n\n\n\n\n\n\n\nIt’s essential to set user headers as a standard practice when accessing web APIs to identify the source of the requests.\n\n\n\n\nOur first step in data retrieval is to obtain the list of companies available on the SEC. This list contains essential information, including the Central Index Key (CIK), which uniquely identifies each company that files reports with the SEC. We’ll make an HTTP request to fetch this list:\n\n\nCode\n# Retrieve company list\ncompany_List &lt;- retrieve_Company_List(headers)\nkable(head(company_List))\n\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n1\n0000789019\nMSFT\nMICROSOFT CORP\n\n\n2\n0001652044\nGOOGL\nAlphabet Inc.\n\n\n3\n0001018724\nAMZN\nAMAZON COM INC\n\n\n4\n0001045810\nNVDA\nNVIDIA CORP\n\n\n5\n0001326801\nMETA\nMeta Platforms, Inc.\n\n\n\n\n\n\n\n\n\n\nFor our analysis, we’ll use JAKKS Pacific Inc. (AAPL) as the company of interest. The CIK for JAKKS Pacific Inc. is 0000320193.\nLet’s now select JAKKS Pacific Inc. by its CIK and retrieve its data from the SEC. The data we retrieve will be stored in the company_Data object for further analysis:\n\n\nCode\n# Select JAKKS Pacific Inc. (AAPL) by CIK\ncik &lt;- \"0001009829\"  # CIK for JAKKS Pacific Inc.\ncompany_Data &lt;- retrieve_Company_Data(headers, cik)\n\n# this the first row of the company list as a quick check\ncompany_List[1,] %&gt;% kable()\n\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n\n\n\n\n\nBy following these steps, we’ve imported the necessary libraries, sourced relevant files, and initiated the retrieval of financial data from the SEC. In the subsequent chapters, we will delve deeper into exploring and analyzing the SEC data for JAKKS Pacific Inc.\nBefore we move to the next chapter we save the files.\n\n\nCode\n# Load company_Data\nsaveRDS(company_Data, file = \"company_Data.RDS\") \nsaveRDS(cik, file = \"cik.RDS\")"
  },
  {
    "objectID": "01_data_retrieval.html#lets-get-started",
    "href": "01_data_retrieval.html#lets-get-started",
    "title": "Data Retrieval",
    "section": "",
    "text": "To kick things off, we need to import the essential libraries that will empower us to interact with the SEC’s data and perform insightful analysis. The magic happens when we source the necessary files via setup.qmd.\n\n\nTo start, we need to import the required libraries. These libraries provide functions and tools that enable us to interact with the SEC’s data and perform data analysis. The necessary libraries are listed in setup.qmd.\nThe data retrieval process is orchestrated using a set of functions located in separate R script files. We’ll be sourcing these files via setup.qmd to access the functions for retrieving, processing, and analyzing SEC data.\n\n\nCode\nsource(\"setup.qmd\")           # Sourcing necessary libraries\n\n\nThis sets the stage for retrieving and working with SEC data efficiently."
  },
  {
    "objectID": "01_data_retrieval.html#sec-retrieve-data",
    "href": "01_data_retrieval.html#sec-retrieve-data",
    "title": "Data Retrieval",
    "section": "",
    "text": "In this example, we will focus on one company, JAKKS Pacific Inc. (AAPL), as the target for our data retrieval.\n\n\nTo access the SEC API, we need to define user headers. These headers will be used for making HTTP requests to the SEC servers. We can set our user agent as an example:\n\n\nCode\n# Define user headers\nheaders &lt;- c('User-Agent' = 'email@address.com')\nkable(headers)\n\n\n\n\n\n\nx\n\n\n\n\nUser-Agent\nemail@address.com\n\n\n\n\n\n\n\nIt’s essential to set user headers as a standard practice when accessing web APIs to identify the source of the requests."
  },
  {
    "objectID": "01_data_retrieval.html#sec-company-list",
    "href": "01_data_retrieval.html#sec-company-list",
    "title": "Data Retrieval",
    "section": "",
    "text": "Our first step in data retrieval is to obtain the list of companies available on the SEC. This list contains essential information, including the Central Index Key (CIK), which uniquely identifies each company that files reports with the SEC. We’ll make an HTTP request to fetch this list:\n\n\nCode\n# Retrieve company list\ncompany_List &lt;- retrieve_Company_List(headers)\nkable(head(company_List))\n\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n1\n0000789019\nMSFT\nMICROSOFT CORP\n\n\n2\n0001652044\nGOOGL\nAlphabet Inc.\n\n\n3\n0001018724\nAMZN\nAMAZON COM INC\n\n\n4\n0001045810\nNVDA\nNVIDIA CORP\n\n\n5\n0001326801\nMETA\nMeta Platforms, Inc."
  },
  {
    "objectID": "01_data_retrieval.html#selecting-a-company-jakks-pacific-inc.-aapl",
    "href": "01_data_retrieval.html#selecting-a-company-jakks-pacific-inc.-aapl",
    "title": "Data Retrieval",
    "section": "",
    "text": "For our analysis, we’ll use JAKKS Pacific Inc. (AAPL) as the company of interest. The CIK for JAKKS Pacific Inc. is 0000320193.\nLet’s now select JAKKS Pacific Inc. by its CIK and retrieve its data from the SEC. The data we retrieve will be stored in the company_Data object for further analysis:\n\n\nCode\n# Select JAKKS Pacific Inc. (AAPL) by CIK\ncik &lt;- \"0001009829\"  # CIK for JAKKS Pacific Inc.\ncompany_Data &lt;- retrieve_Company_Data(headers, cik)\n\n# this the first row of the company list as a quick check\ncompany_List[1,] %&gt;% kable()\n\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n\n\n\n\n\nBy following these steps, we’ve imported the necessary libraries, sourced relevant files, and initiated the retrieval of financial data from the SEC. In the subsequent chapters, we will delve deeper into exploring and analyzing the SEC data for JAKKS Pacific Inc.\nBefore we move to the next chapter we save the files.\n\n\nCode\n# Load company_Data\nsaveRDS(company_Data, file = \"company_Data.RDS\") \nsaveRDS(cik, file = \"cik.RDS\")"
  },
  {
    "objectID": "11_JAKK.html",
    "href": "11_JAKK.html",
    "title": "JAKKS Pacific, Inc. (JAKK)",
    "section": "",
    "text": "JAKKS Pacific, Inc. (JAKK)\nWork in progress [..]"
  },
  {
    "objectID": "A1_main_script.html",
    "href": "A1_main_script.html",
    "title": "R script: Main Script",
    "section": "",
    "text": "R script: Main Script\nWork in progress [..]"
  },
  {
    "objectID": "03_data_analysis.html#note",
    "href": "03_data_analysis.html#note",
    "title": "Data Analysis",
    "section": "",
    "text": "As mentioned in the previous chapter, the df_Facts dataframe contains financial data along with corresponding reporting information, such as df_Facts$end, df_Facts$fy, df_Facts$fp, and df_Facts$form. However, there are instances where a filing (e.g., 10-K) for a specific fiscal period (fy and fp) includes a comparison with previous fiscal periods. In these cases, the financial data may actually refer to a different period, as indicated by df_Facts$end, rather than the period specified by fy and fp.\nTo handle this scenario, we construct a dataframe of financial data based on the end date (df_Facts$end) of the reporting period and remove the remaining attributes such as fy, fp, etc. This ensures that we focus on the actual reporting period for the financial data."
  }
]