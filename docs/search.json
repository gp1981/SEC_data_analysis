[
  {
    "objectID": "11_AAPL.html",
    "href": "11_AAPL.html",
    "title": "Apple Inc (AAPL)",
    "section": "",
    "text": "Apple Inc (AAPL)\nWork in progress [..]"
  },
  {
    "objectID": "A1_main_script.html",
    "href": "A1_main_script.html",
    "title": "R script: Main Script",
    "section": "",
    "text": "R script: Main Script\nWork in progress [..]"
  },
  {
    "objectID": "02_data_exploration.html",
    "href": "02_data_exploration.html",
    "title": "Explore data retrieved from SEC",
    "section": "",
    "text": "In this section, we delve into the structure of the SEC data obtained from the API. The data follows a structured format in compliance with SEC reporting standards, and understanding this structure is vital for effective analysis.\nFirst, we load the required libraries and files.\n\nsource(\"setup.qmd\")          \n\nNow, let’s retrieve the necessary objects for data exploration:\n\n# Load company_Data\ncompany_Data &lt;- readRDS(\"company_data.RDS\")\ncik &lt;- readRDS(\"cik.RDS\")\n\n\n\nThe data retrieved from the SEC API is structured financial data compliant with SEC reporting standards. It utilizes XBRL (eXtensible Business Reporting Language), a structured, machine-readable format ensuring consistency and comparability across companies and filings.\nTo navigate through this structure for analysis, consider the following key elements:\n\ncik: The Central Index Key (CIK) is a unique identifier assigned to each company filing reports with the U.S. Securities and Exchange Commission (SEC).\nentityName: This is the name of the company, such as “Apple Inc.”\nfacts: The main container for financial data, housing two critical sections:\n\ndei: Contains Document and Entity Information (DEI), providing basic company details.\nus-gaap: Holds financial data following the U.S. Generally Accepted Accounting Principles (GAAP).\n\n\nWithin these sections, financial data is organized as a list of items, each with specific attributes:\n\nConcept: Represents a financial measure or item (e.g., “Assets”) with an associated label and data type.\nFacts: Actual numerical values associated with the concept, with attributes like “value,” “unitRef,” and “contextRef.”\nAttributes: Additional attributes providing context for the data, such as reporting period, currency unit, or data precision.\n\nEffectively analyzing this data involves selecting relevant concepts and facts, potentially transforming or pivoting the data for further processing and visualization.\n\n\nLet’s start by exploring the structure of company_Data:\n\n# Visualize structure of the company_Data \nstr(company_Data, max.level = 1)\n\nList of 3\n $ company_Metadata:List of 22\n $ company_Facts   :List of 3\n $ company_Concept :List of 7\n\n\nThe output reveals that company_Data comprises three lists with nested lists, such as company_Metadata with 22 lists.\n\n\nIn R, a list is a versatile data structure capable of holding elements of different data types. It offers flexibility, allowing each element to be of a different type.\nFor company_Data, the list structure organizes various pieces of information, accommodating different data types. Understanding this structure is crucial for navigating and extracting specific information from complex datasets.\n\n\nTo access the lists we use the symbol $ in after the object e.g. company_Data$company_Metadata.\nNext, we split the data into separate lists: company_Metadata, company_Facts, company_Concept.\n\n# Split the lists in company_Data\ncompany_Metadata &lt;- company_Data$company_Metadata\ncompany_Facts &lt;- company_Data$company_Facts\ncompany_Concept &lt;- company_Data$company_Concept\n\nNow, let’s examine the structures and content of these lists:\n\n\nLet’s start with company_Metadata which includes 22 elements: characters, integer, sub-list (or nested list), etc.\n\n# Visualize structure of the company_Metadata\nstr(company_Metadata, max.level = 1)\n\nList of 22\n $ cik                              : chr \"320193\"\n $ entityType                       : chr \"operating\"\n $ sic                              : chr \"3571\"\n $ sicDescription                   : chr \"Electronic Computers\"\n $ insiderTransactionForOwnerExists : int 0\n $ insiderTransactionForIssuerExists: int 1\n $ name                             : chr \"Apple Inc.\"\n $ tickers                          : chr \"AAPL\"\n $ exchanges                        : chr \"Nasdaq\"\n $ ein                              : chr \"942404110\"\n $ description                      : chr \"\"\n $ website                          : chr \"\"\n $ investorWebsite                  : chr \"\"\n $ category                         : chr \"Large accelerated filer\"\n $ fiscalYearEnd                    : chr \"0930\"\n $ stateOfIncorporation             : chr \"CA\"\n $ stateOfIncorporationDescription  : chr \"CA\"\n $ addresses                        :List of 2\n $ phone                            : chr \"(408) 996-1010\"\n $ flags                            : chr \"\"\n $ formerNames                      :'data.frame':  3 obs. of  3 variables:\n $ filings                          :List of 2\n\n\nThe most relevant information of company_Metadata are included in the elemnent filing which is a nested list and contains the filing attributes.\n\n# Visualize structure of the company_Metadata\nstr(company_Metadata$filing, max.level = 2)\n\nList of 2\n $ recent:List of 14\n  ..$ accessionNumber      : chr [1:1003] \"0000320193-23-000106\" \"0000320193-23-000104\" \"0000320193-23-000099\" \"0000320193-23-000097\" ...\n  ..$ filingDate           : chr [1:1003] \"2023-11-03\" \"2023-11-02\" \"2023-10-17\" \"2023-10-10\" ...\n  ..$ reportDate           : chr [1:1003] \"2023-09-30\" \"2023-11-02\" \"2023-10-15\" \"2023-10-06\" ...\n  ..$ acceptanceDateTime   : chr [1:1003] \"2023-11-02T18:08:27.000Z\" \"2023-11-02T16:30:32.000Z\" \"2023-10-17T18:30:48.000Z\" \"2023-10-10T18:31:19.000Z\" ...\n  ..$ act                  : chr [1:1003] \"34\" \"34\" \"\" \"\" ...\n  ..$ form                 : chr [1:1003] \"10-K\" \"8-K\" \"4\" \"4\" ...\n  ..$ fileNumber           : chr [1:1003] \"001-36743\" \"001-36743\" \"\" \"\" ...\n  ..$ filmNumber           : chr [1:1003] \"231373899\" \"231372885\" \"\" \"\" ...\n  ..$ items                : chr [1:1003] \"\" \"2.02,9.01\" \"\" \"\" ...\n  ..$ size                 : int [1:1003] 9569569 450675 16029 4875 8889 6090 5310 4338 15985 19514 ...\n  ..$ isXBRL               : int [1:1003] 1 1 0 0 0 0 0 0 0 0 ...\n  ..$ isInlineXBRL         : int [1:1003] 1 1 0 0 0 0 0 0 0 0 ...\n  ..$ primaryDocument      : chr [1:1003] \"aapl-20230930.htm\" \"aapl-20231102.htm\" \"xslF345X05/wk-form4_1697581839.xml\" \"xslF345X05/wk-form4_1696977071.xml\" ...\n  ..$ primaryDocDescription: chr [1:1003] \"10-K\" \"8-K\" \"FORM 4\" \"FORM 4\" ...\n $ files :'data.frame': 1 obs. of  4 variables:\n  ..$ name       : chr \"CIK0000320193-submissions-001.json\"\n  ..$ filingCount: int 1003\n  ..$ filingFrom : chr \"1994-01-26\"\n  ..$ filingTo   : chr \"2013-04-16\"\n\n\nThe format of the dataset as printed is not very useful. We see that there are useful information on the forms (e.g. 10K) and dates (e.g. filing dates).\nFor now we will keep it as is and we will come back later on how to improve the readibility\n\n\n\ncompany_Facts is relatively simple and is a list of 3 elements.\n\n# Visualize structure of the company_Facts\nstr(company_Facts, max.level = 1)\n\nList of 3\n $ cik       : int 320193\n $ entityName: chr \"Apple Inc.\"\n $ facts     :List of 2\n\n\nThe last element company_Facts$facts is the most relevant one.\n\n# Visualize structure of the company_Facts\nstr(company_Facts$facts, max.level = 1)\n\nList of 2\n $ dei    :List of 2\n $ us-gaap:List of 498\n\n\nThe us-gaap list is the most significant sub-element of facts, containing 498 nested sub-sub-elements. Let’s examine the first five.\n\n# Visualize structure of the company_Facts\nFacts_us_gaap &lt;- str(company_Facts$facts$`us-gaap`[1:5], max.level = 1)\n\nList of 5\n $ AccountsPayable             :List of 3\n $ AccountsPayableCurrent      :List of 3\n $ AccountsReceivableNetCurrent:List of 3\n $ AccruedIncomeTaxesCurrent   :List of 3\n $ AccruedIncomeTaxesNoncurrent:List of 3\n\n\nThese sub-elements include essential fundamentals of the company and are themselves nested lists. Let’s explore the structure of the first one.\n\n# Visualize structure of the company_Facts\nstr(company_Facts$facts$`us-gaap`[1], max.level = 4)\n\nList of 1\n $ AccountsPayable:List of 3\n  ..$ label      : chr \"Accounts Payable (Deprecated 2009-01-31)\"\n  ..$ description: chr \"Carrying value as of the balance sheet date of liabilities incurred (and for which invoices have typically been\"| __truncated__\n  ..$ units      :List of 1\n  .. ..$ USD:'data.frame':  2 obs. of  8 variables:\n  .. .. ..$ end  : chr [1:2] \"2008-09-27\" \"2009-06-27\"\n  .. .. ..$ val  : num [1:2] 5.52e+09 4.85e+09\n  .. .. ..$ accn : chr [1:2] \"0001193125-09-153165\" \"0001193125-09-153165\"\n  .. .. ..$ fy   : int [1:2] 2009 2009\n  .. .. ..$ fp   : chr [1:2] \"Q3\" \"Q3\"\n  .. .. ..$ form : chr [1:2] \"10-Q\" \"10-Q\"\n  .. .. ..$ filed: chr [1:2] \"2009-07-22\" \"2009-07-22\"\n  .. .. ..$ frame: chr [1:2] \"CY2008Q3I\" \"CY2009Q2I\"\n\n\nThe output presents the structure of the information related to the first element: AccountsPayable\n\nAccountsPayable: Represents a financial concept within the us-gaap section, specifically referring to “Accounts Payable (Deprecated 2009-01-31).”\n\nlabel: A human-readable description of the concept, such as “Accounts Payable (Deprecated 2009-01-31).”\ndescription: A detailed explanation of the concept, providing insight into the carrying value as of the balance sheet date.\nunits: A data frame with 2 observations and 8 variables. The variables include information such as:\n\nend the end date\nval value\naccn accession number\nfy fiscal year\nfp fiscal period\nform form type\nfiled date in which the form was filed\nframe frame. The format “CY2008Q3I” suggests a possible combination of calendar year (CY), year (2008), fiscal quarter (Q3), and possibly an additional identifier (“I”)\n\n\n\nThis hierarchical structure provides a detailed view of the financial concept “Accounts Payable (Deprecated 2009-01-31)” within the us-gaap section, including its label, description, and historical data with unit details.\n\n\nMost of the SEC data required for fundamentals analysis is included in a structure of nested lists. Its understanding is critical to properly retrieve the data. Once we automate the process of “un-nesting” the lists, we will be able to verify that this process led to a dataframe structure where the data is properly located.\n\n\n\n\n\nFinally, let’s examine the structure associated with the company’s Concept.\n\n# Visualize structure of the company_Concepts\nstr(company_Concept, max.level = 3)\n\nList of 7\n $ cik        : int 320193\n $ taxonomy   : chr \"us-gaap\"\n $ tag        : chr \"Assets\"\n $ label      : chr \"Assets\"\n $ description: chr \"Sum of the carrying amounts as of the balance sheet date of all assets that are recognized. Assets are probable\"| __truncated__\n $ entityName : chr \"Apple Inc.\"\n $ units      :List of 1\n  ..$ USD:'data.frame': 124 obs. of  8 variables:\n  .. ..$ end  : chr [1:124] \"2008-09-27\" \"2008-09-27\" \"2008-09-27\" \"2008-09-27\" ...\n  .. ..$ val  : num [1:124] 3.96e+10 3.96e+10 3.62e+10 3.62e+10 4.81e+10 ...\n  .. ..$ accn : chr [1:124] \"0001193125-09-153165\" \"0001193125-09-214859\" \"0001193125-10-012091\" \"0001193125-10-238044\" ...\n  .. ..$ fy   : int [1:124] 2009 2009 2009 2010 2009 2009 2010 2009 2010 2010 ...\n  .. ..$ fp   : chr [1:124] \"Q3\" \"FY\" \"FY\" \"FY\" ...\n  .. ..$ form : chr [1:124] \"10-Q\" \"10-K\" \"10-K/A\" \"10-K\" ...\n  .. ..$ filed: chr [1:124] \"2009-07-22\" \"2009-10-27\" \"2010-01-25\" \"2010-10-27\" ...\n  .. ..$ frame: chr [1:124] NA NA NA \"CY2008Q3I\" ...\n\n\nThe output shows the structure associated with the Asset of the company under the taxonomy of us-gaap.\n\n\n\n\nLet’s create now a dataframe including the data retrieved from company_Facts$facts$`us-gaap`.\nOne way to create a dataframe is to manually describe each columns and then point to the company_Metadata or company_Facts nested list and data.\n\n# Create a DataFrame with relevant data\ncompany_df &lt;- data.frame(\n  CIK = cik,\n  Name = company_Metadata$name,\n  FiscalYearEnd = company_Metadata$fiscalYearEnd,\n  AssetsLabel = company_Facts$facts$`us-gaap`$Assets$label,\n  AssetsDescription = company_Facts$facts$`us-gaap`$Assets$description\n  # Add more relevant columns here\n)\nlibrary(knitr)\nkable(company_df)\n\n\n\n\n\n\n\n\n\n\n\nCIK\nName\nFiscalYearEnd\nAssetsLabel\nAssetsDescription\n\n\n\n\n0000320193\nApple Inc.\n0930\nAssets\nSum of the carrying amounts as of the balance sheet date of all assets that are recognized. Assets are probable future economic benefits obtained or controlled by an entity as a result of past transactions or events.\n\n\n\n\n\nWe would probably agree that this is not the most efficient way to format the data from the company_Metadata and company_Fact datasets.\n\n\nA dataframe including the financials reported by a company is usually formatted as a matrix: the columns represent the fundamentals (or also Concept in XBRL terms) e.g. Accounts Payables, and the rows represent the time e.g. each row represent a day or a quarter, etc.\n\n\n\n\nThe following code can be used to un-nest the list within company_Facts and create a dataframe easy to visualize and useful for our purpose1.\n\nlibrary(kableExtra)\n\n# Un-nest the company_Facts (and nested unit list)\ndf_Facts &lt;- company_Facts$facts$`us-gaap` %&gt;%\n  tibble() %&gt;%\n  unnest_wider(col = everything()) %&gt;%\n  unnest(cols = c(units)) %&gt;%\n  unnest(cols = c(units))\n\n# Format numbers in the val column as millions\ndf_Facts$val &lt;- scales::number(df_Facts$val / 1e6, accuracy = 0.1, suffix = \"M\")\n\n# Select the columns to print out\ndf_Facts_selected_columns &lt;- df_Facts %&gt;%\n  select(-description)\n\n# Present the output with wrapped text and formatted numbers\ndf_Facts_selected_columns %&gt;% head() %&gt;%\n  kable(\"html\") %&gt;%\n  kable_styling(full_width = FALSE) %&gt;%\n  column_spec(1, width = \"150px\")\n\n\n\n\nlabel\nend\nval\naccn\nfy\nfp\nform\nfiled\nframe\nstart\n\n\n\n\nAccounts Payable (Deprecated 2009-01-31)\n2008-09-27\n5 520.0M\n0001193125-09-153165\n2009\nQ3\n10-Q\n2009-07-22\nCY2008Q3I\nNA\n\n\nAccounts Payable (Deprecated 2009-01-31)\n2009-06-27\n4 854.0M\n0001193125-09-153165\n2009\nQ3\n10-Q\n2009-07-22\nCY2009Q2I\nNA\n\n\nAccounts Payable, Current\n2008-09-27\n5 520.0M\n0001193125-09-214859\n2009\nFY\n10-K\n2009-10-27\nNA\nNA\n\n\nAccounts Payable, Current\n2008-09-27\n5 520.0M\n0001193125-10-012091\n2009\nFY\n10-K/A\n2010-01-25\nCY2008Q3I\nNA\n\n\nAccounts Payable, Current\n2009-09-26\n5 601.0M\n0001193125-09-214859\n2009\nFY\n10-K\n2009-10-27\nNA\nNA\n\n\nAccounts Payable, Current\n2009-09-26\n5 601.0M\n0001193125-10-012085\n2010\nQ1\n10-Q\n2010-01-25\nNA\nNA"
  },
  {
    "objectID": "02_data_exploration.html#structure-of-the-sec-data-xbrl",
    "href": "02_data_exploration.html#structure-of-the-sec-data-xbrl",
    "title": "Explore data retrieved from SEC",
    "section": "",
    "text": "The data retrieved from the SEC API is structured financial data compliant with SEC reporting standards. It utilizes XBRL (eXtensible Business Reporting Language), a structured, machine-readable format ensuring consistency and comparability across companies and filings.\nTo navigate through this structure for analysis, consider the following key elements:\n\ncik: The Central Index Key (CIK) is a unique identifier assigned to each company filing reports with the U.S. Securities and Exchange Commission (SEC).\nentityName: This is the name of the company, such as “Apple Inc.”\nfacts: The main container for financial data, housing two critical sections:\n\ndei: Contains Document and Entity Information (DEI), providing basic company details.\nus-gaap: Holds financial data following the U.S. Generally Accepted Accounting Principles (GAAP).\n\n\nWithin these sections, financial data is organized as a list of items, each with specific attributes:\n\nConcept: Represents a financial measure or item (e.g., “Assets”) with an associated label and data type.\nFacts: Actual numerical values associated with the concept, with attributes like “value,” “unitRef,” and “contextRef.”\nAttributes: Additional attributes providing context for the data, such as reporting period, currency unit, or data precision.\n\nEffectively analyzing this data involves selecting relevant concepts and facts, potentially transforming or pivoting the data for further processing and visualization.\n\n\nLet’s start by exploring the structure of company_Data:\n\n# Visualize structure of the company_Data \nstr(company_Data, max.level = 1)\n\nList of 3\n $ company_Metadata:List of 22\n $ company_Facts   :List of 3\n $ company_Concept :List of 7\n\n\nThe output reveals that company_Data comprises three lists with nested lists, such as company_Metadata with 22 lists.\n\n\nIn R, a list is a versatile data structure capable of holding elements of different data types. It offers flexibility, allowing each element to be of a different type.\nFor company_Data, the list structure organizes various pieces of information, accommodating different data types. Understanding this structure is crucial for navigating and extracting specific information from complex datasets.\n\n\nTo access the lists we use the symbol $ in after the object e.g. company_Data$company_Metadata.\nNext, we split the data into separate lists: company_Metadata, company_Facts, company_Concept.\n\n# Split the lists in company_Data\ncompany_Metadata &lt;- company_Data$company_Metadata\ncompany_Facts &lt;- company_Data$company_Facts\ncompany_Concept &lt;- company_Data$company_Concept\n\nNow, let’s examine the structures and content of these lists:\n\n\nLet’s start with company_Metadata which includes 22 elements: characters, integer, sub-list (or nested list), etc.\n\n# Visualize structure of the company_Metadata\nstr(company_Metadata, max.level = 1)\n\nList of 22\n $ cik                              : chr \"320193\"\n $ entityType                       : chr \"operating\"\n $ sic                              : chr \"3571\"\n $ sicDescription                   : chr \"Electronic Computers\"\n $ insiderTransactionForOwnerExists : int 0\n $ insiderTransactionForIssuerExists: int 1\n $ name                             : chr \"Apple Inc.\"\n $ tickers                          : chr \"AAPL\"\n $ exchanges                        : chr \"Nasdaq\"\n $ ein                              : chr \"942404110\"\n $ description                      : chr \"\"\n $ website                          : chr \"\"\n $ investorWebsite                  : chr \"\"\n $ category                         : chr \"Large accelerated filer\"\n $ fiscalYearEnd                    : chr \"0930\"\n $ stateOfIncorporation             : chr \"CA\"\n $ stateOfIncorporationDescription  : chr \"CA\"\n $ addresses                        :List of 2\n $ phone                            : chr \"(408) 996-1010\"\n $ flags                            : chr \"\"\n $ formerNames                      :'data.frame':  3 obs. of  3 variables:\n $ filings                          :List of 2\n\n\nThe most relevant information of company_Metadata are included in the elemnent filing which is a nested list and contains the filing attributes.\n\n# Visualize structure of the company_Metadata\nstr(company_Metadata$filing, max.level = 2)\n\nList of 2\n $ recent:List of 14\n  ..$ accessionNumber      : chr [1:1003] \"0000320193-23-000106\" \"0000320193-23-000104\" \"0000320193-23-000099\" \"0000320193-23-000097\" ...\n  ..$ filingDate           : chr [1:1003] \"2023-11-03\" \"2023-11-02\" \"2023-10-17\" \"2023-10-10\" ...\n  ..$ reportDate           : chr [1:1003] \"2023-09-30\" \"2023-11-02\" \"2023-10-15\" \"2023-10-06\" ...\n  ..$ acceptanceDateTime   : chr [1:1003] \"2023-11-02T18:08:27.000Z\" \"2023-11-02T16:30:32.000Z\" \"2023-10-17T18:30:48.000Z\" \"2023-10-10T18:31:19.000Z\" ...\n  ..$ act                  : chr [1:1003] \"34\" \"34\" \"\" \"\" ...\n  ..$ form                 : chr [1:1003] \"10-K\" \"8-K\" \"4\" \"4\" ...\n  ..$ fileNumber           : chr [1:1003] \"001-36743\" \"001-36743\" \"\" \"\" ...\n  ..$ filmNumber           : chr [1:1003] \"231373899\" \"231372885\" \"\" \"\" ...\n  ..$ items                : chr [1:1003] \"\" \"2.02,9.01\" \"\" \"\" ...\n  ..$ size                 : int [1:1003] 9569569 450675 16029 4875 8889 6090 5310 4338 15985 19514 ...\n  ..$ isXBRL               : int [1:1003] 1 1 0 0 0 0 0 0 0 0 ...\n  ..$ isInlineXBRL         : int [1:1003] 1 1 0 0 0 0 0 0 0 0 ...\n  ..$ primaryDocument      : chr [1:1003] \"aapl-20230930.htm\" \"aapl-20231102.htm\" \"xslF345X05/wk-form4_1697581839.xml\" \"xslF345X05/wk-form4_1696977071.xml\" ...\n  ..$ primaryDocDescription: chr [1:1003] \"10-K\" \"8-K\" \"FORM 4\" \"FORM 4\" ...\n $ files :'data.frame': 1 obs. of  4 variables:\n  ..$ name       : chr \"CIK0000320193-submissions-001.json\"\n  ..$ filingCount: int 1003\n  ..$ filingFrom : chr \"1994-01-26\"\n  ..$ filingTo   : chr \"2013-04-16\"\n\n\nThe format of the dataset as printed is not very useful. We see that there are useful information on the forms (e.g. 10K) and dates (e.g. filing dates).\nFor now we will keep it as is and we will come back later on how to improve the readibility\n\n\n\ncompany_Facts is relatively simple and is a list of 3 elements.\n\n# Visualize structure of the company_Facts\nstr(company_Facts, max.level = 1)\n\nList of 3\n $ cik       : int 320193\n $ entityName: chr \"Apple Inc.\"\n $ facts     :List of 2\n\n\nThe last element company_Facts$facts is the most relevant one.\n\n# Visualize structure of the company_Facts\nstr(company_Facts$facts, max.level = 1)\n\nList of 2\n $ dei    :List of 2\n $ us-gaap:List of 498\n\n\nThe us-gaap list is the most significant sub-element of facts, containing 498 nested sub-sub-elements. Let’s examine the first five.\n\n# Visualize structure of the company_Facts\nFacts_us_gaap &lt;- str(company_Facts$facts$`us-gaap`[1:5], max.level = 1)\n\nList of 5\n $ AccountsPayable             :List of 3\n $ AccountsPayableCurrent      :List of 3\n $ AccountsReceivableNetCurrent:List of 3\n $ AccruedIncomeTaxesCurrent   :List of 3\n $ AccruedIncomeTaxesNoncurrent:List of 3\n\n\nThese sub-elements include essential fundamentals of the company and are themselves nested lists. Let’s explore the structure of the first one.\n\n# Visualize structure of the company_Facts\nstr(company_Facts$facts$`us-gaap`[1], max.level = 4)\n\nList of 1\n $ AccountsPayable:List of 3\n  ..$ label      : chr \"Accounts Payable (Deprecated 2009-01-31)\"\n  ..$ description: chr \"Carrying value as of the balance sheet date of liabilities incurred (and for which invoices have typically been\"| __truncated__\n  ..$ units      :List of 1\n  .. ..$ USD:'data.frame':  2 obs. of  8 variables:\n  .. .. ..$ end  : chr [1:2] \"2008-09-27\" \"2009-06-27\"\n  .. .. ..$ val  : num [1:2] 5.52e+09 4.85e+09\n  .. .. ..$ accn : chr [1:2] \"0001193125-09-153165\" \"0001193125-09-153165\"\n  .. .. ..$ fy   : int [1:2] 2009 2009\n  .. .. ..$ fp   : chr [1:2] \"Q3\" \"Q3\"\n  .. .. ..$ form : chr [1:2] \"10-Q\" \"10-Q\"\n  .. .. ..$ filed: chr [1:2] \"2009-07-22\" \"2009-07-22\"\n  .. .. ..$ frame: chr [1:2] \"CY2008Q3I\" \"CY2009Q2I\"\n\n\nThe output presents the structure of the information related to the first element: AccountsPayable\n\nAccountsPayable: Represents a financial concept within the us-gaap section, specifically referring to “Accounts Payable (Deprecated 2009-01-31).”\n\nlabel: A human-readable description of the concept, such as “Accounts Payable (Deprecated 2009-01-31).”\ndescription: A detailed explanation of the concept, providing insight into the carrying value as of the balance sheet date.\nunits: A data frame with 2 observations and 8 variables. The variables include information such as:\n\nend the end date\nval value\naccn accession number\nfy fiscal year\nfp fiscal period\nform form type\nfiled date in which the form was filed\nframe frame. The format “CY2008Q3I” suggests a possible combination of calendar year (CY), year (2008), fiscal quarter (Q3), and possibly an additional identifier (“I”)\n\n\n\nThis hierarchical structure provides a detailed view of the financial concept “Accounts Payable (Deprecated 2009-01-31)” within the us-gaap section, including its label, description, and historical data with unit details.\n\n\nMost of the SEC data required for fundamentals analysis is included in a structure of nested lists. Its understanding is critical to properly retrieve the data. Once we automate the process of “un-nesting” the lists, we will be able to verify that this process led to a dataframe structure where the data is properly located.\n\n\n\n\n\nFinally, let’s examine the structure associated with the company’s Concept.\n\n# Visualize structure of the company_Concepts\nstr(company_Concept, max.level = 3)\n\nList of 7\n $ cik        : int 320193\n $ taxonomy   : chr \"us-gaap\"\n $ tag        : chr \"Assets\"\n $ label      : chr \"Assets\"\n $ description: chr \"Sum of the carrying amounts as of the balance sheet date of all assets that are recognized. Assets are probable\"| __truncated__\n $ entityName : chr \"Apple Inc.\"\n $ units      :List of 1\n  ..$ USD:'data.frame': 124 obs. of  8 variables:\n  .. ..$ end  : chr [1:124] \"2008-09-27\" \"2008-09-27\" \"2008-09-27\" \"2008-09-27\" ...\n  .. ..$ val  : num [1:124] 3.96e+10 3.96e+10 3.62e+10 3.62e+10 4.81e+10 ...\n  .. ..$ accn : chr [1:124] \"0001193125-09-153165\" \"0001193125-09-214859\" \"0001193125-10-012091\" \"0001193125-10-238044\" ...\n  .. ..$ fy   : int [1:124] 2009 2009 2009 2010 2009 2009 2010 2009 2010 2010 ...\n  .. ..$ fp   : chr [1:124] \"Q3\" \"FY\" \"FY\" \"FY\" ...\n  .. ..$ form : chr [1:124] \"10-Q\" \"10-K\" \"10-K/A\" \"10-K\" ...\n  .. ..$ filed: chr [1:124] \"2009-07-22\" \"2009-10-27\" \"2010-01-25\" \"2010-10-27\" ...\n  .. ..$ frame: chr [1:124] NA NA NA \"CY2008Q3I\" ...\n\n\nThe output shows the structure associated with the Asset of the company under the taxonomy of us-gaap.\n\n\n\n\nLet’s create now a dataframe including the data retrieved from company_Facts$facts$`us-gaap`.\nOne way to create a dataframe is to manually describe each columns and then point to the company_Metadata or company_Facts nested list and data.\n\n# Create a DataFrame with relevant data\ncompany_df &lt;- data.frame(\n  CIK = cik,\n  Name = company_Metadata$name,\n  FiscalYearEnd = company_Metadata$fiscalYearEnd,\n  AssetsLabel = company_Facts$facts$`us-gaap`$Assets$label,\n  AssetsDescription = company_Facts$facts$`us-gaap`$Assets$description\n  # Add more relevant columns here\n)\nlibrary(knitr)\nkable(company_df)\n\n\n\n\n\n\n\n\n\n\n\nCIK\nName\nFiscalYearEnd\nAssetsLabel\nAssetsDescription\n\n\n\n\n0000320193\nApple Inc.\n0930\nAssets\nSum of the carrying amounts as of the balance sheet date of all assets that are recognized. Assets are probable future economic benefits obtained or controlled by an entity as a result of past transactions or events.\n\n\n\n\n\nWe would probably agree that this is not the most efficient way to format the data from the company_Metadata and company_Fact datasets.\n\n\nA dataframe including the financials reported by a company is usually formatted as a matrix: the columns represent the fundamentals (or also Concept in XBRL terms) e.g. Accounts Payables, and the rows represent the time e.g. each row represent a day or a quarter, etc.\n\n\n\n\nThe following code can be used to un-nest the list within company_Facts and create a dataframe easy to visualize and useful for our purpose1.\n\nlibrary(kableExtra)\n\n# Un-nest the company_Facts (and nested unit list)\ndf_Facts &lt;- company_Facts$facts$`us-gaap` %&gt;%\n  tibble() %&gt;%\n  unnest_wider(col = everything()) %&gt;%\n  unnest(cols = c(units)) %&gt;%\n  unnest(cols = c(units))\n\n# Format numbers in the val column as millions\ndf_Facts$val &lt;- scales::number(df_Facts$val / 1e6, accuracy = 0.1, suffix = \"M\")\n\n# Select the columns to print out\ndf_Facts_selected_columns &lt;- df_Facts %&gt;%\n  select(-description)\n\n# Present the output with wrapped text and formatted numbers\ndf_Facts_selected_columns %&gt;% head() %&gt;%\n  kable(\"html\") %&gt;%\n  kable_styling(full_width = FALSE) %&gt;%\n  column_spec(1, width = \"150px\")\n\n\n\n\nlabel\nend\nval\naccn\nfy\nfp\nform\nfiled\nframe\nstart\n\n\n\n\nAccounts Payable (Deprecated 2009-01-31)\n2008-09-27\n5 520.0M\n0001193125-09-153165\n2009\nQ3\n10-Q\n2009-07-22\nCY2008Q3I\nNA\n\n\nAccounts Payable (Deprecated 2009-01-31)\n2009-06-27\n4 854.0M\n0001193125-09-153165\n2009\nQ3\n10-Q\n2009-07-22\nCY2009Q2I\nNA\n\n\nAccounts Payable, Current\n2008-09-27\n5 520.0M\n0001193125-09-214859\n2009\nFY\n10-K\n2009-10-27\nNA\nNA\n\n\nAccounts Payable, Current\n2008-09-27\n5 520.0M\n0001193125-10-012091\n2009\nFY\n10-K/A\n2010-01-25\nCY2008Q3I\nNA\n\n\nAccounts Payable, Current\n2009-09-26\n5 601.0M\n0001193125-09-214859\n2009\nFY\n10-K\n2009-10-27\nNA\nNA\n\n\nAccounts Payable, Current\n2009-09-26\n5 601.0M\n0001193125-10-012085\n2010\nQ1\n10-Q\n2010-01-25\nNA\nNA"
  },
  {
    "objectID": "02_data_exploration.html#footnotes",
    "href": "02_data_exploration.html#footnotes",
    "title": "Explore data retrieved from SEC",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor visualization purpose we have omitted in df_Facts the column \"description\"↩︎"
  },
  {
    "objectID": "A2_Functions.html",
    "href": "A2_Functions.html",
    "title": "R script: Functions",
    "section": "",
    "text": "R script: Functions\nWork in progress [..]"
  },
  {
    "objectID": "04_data_visualization.html",
    "href": "04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Data Visualization\nWork in progress [..]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction and Overview",
    "section": "",
    "text": "The primary purpose of this project is to retrieve company data from SEC filings and analyze it for educational and research purposes. Please note that the scripts provided here are not intended for making investment decisions, and their use is at your own risk.\n\n\n\nThis financial data retrieval code is provided for informational purposes only, and we make no warranties regarding the accuracy, completeness, or timeliness of the data. It should not be considered financial advice, and users should consult with qualified professionals for personalized guidance. Data is obtained from various sources, including the SEC, and we do not guarantee its accuracy or availability. Users are responsible for assessing and managing risks associated with the financial data. We are not liable for any damages arising from the use of this data or code. Redistribution, resale, or republication of the data without authorization is prohibited. This disclaimer is subject to change, and users are responsible for staying updated. It is not legal advice, and compliance with applicable laws and regulations is the user’s responsibility."
  },
  {
    "objectID": "index.html#purpose-of-this-project",
    "href": "index.html#purpose-of-this-project",
    "title": "Introduction and Overview",
    "section": "",
    "text": "The primary purpose of this project is to retrieve company data from SEC filings and analyze it for educational and research purposes. Please note that the scripts provided here are not intended for making investment decisions, and their use is at your own risk."
  },
  {
    "objectID": "index.html#disclaimer",
    "href": "index.html#disclaimer",
    "title": "Introduction and Overview",
    "section": "",
    "text": "This financial data retrieval code is provided for informational purposes only, and we make no warranties regarding the accuracy, completeness, or timeliness of the data. It should not be considered financial advice, and users should consult with qualified professionals for personalized guidance. Data is obtained from various sources, including the SEC, and we do not guarantee its accuracy or availability. Users are responsible for assessing and managing risks associated with the financial data. We are not liable for any damages arising from the use of this data or code. Redistribution, resale, or republication of the data without authorization is prohibited. This disclaimer is subject to change, and users are responsible for staying updated. It is not legal advice, and compliance with applicable laws and regulations is the user’s responsibility."
  },
  {
    "objectID": "03_data_analysis.html",
    "href": "03_data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "Data Analysis\nWork in progress [..]"
  },
  {
    "objectID": "01_data_retrieval.html",
    "href": "01_data_retrieval.html",
    "title": "Data Retrieval",
    "section": "",
    "text": "In this chapter, we will explore the process of retrieving financial data from the U.S. Securities and Exchange Commission (SEC) filings. To do this, we will use R and several libraries that facilitate data retrieval and analysis.\nTo start, we need to import the required libraries. These libraries provide functions and tools that enable us to interact with the SEC’s data and perform data analysis. The necessary libraries are listed in setup.qmd.\n\n\n\nThe data retrieval process is orchestrated using a set of functions located in separate R script files. We’ll be sourcing these files via setup.qmd to access the functions for retrieving, processing, and analyzing SEC data.\n\nsource(\"setup.qmd\")           # Sourcing necessary libraries\n\nThis sets the stage for retrieving and working with SEC data efficiently.\n\n\n\nIn this example, we will focus on one company, Apple Inc. (AAPL), as the target for our data retrieval.\n\n\nTo access the SEC API, we need to define user headers. These headers will be used for making HTTP requests to the SEC servers. We can set our user agent as an example:\n\n# Define user headers\nheaders &lt;- c('User-Agent' = 'email@address.com')\nkable(headers)\n\n\n\n\n\nx\n\n\n\n\nUser-Agent\nemail@address.com\n\n\n\n\n\nIt’s essential to set user headers as a standard practice when accessing web APIs to identify the source of the requests.\n\n\n\n\nOur first step in data retrieval is to obtain the list of companies available on the SEC. This list contains essential information, including the Central Index Key (CIK), which uniquely identifies each company that files reports with the SEC. We’ll make an HTTP request to fetch this list:\n\n# Retrieve company list\ncompany_List &lt;- retrieve_Company_List(headers)\nkable(head(company_List))\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n1\n0000789019\nMSFT\nMICROSOFT CORP\n\n\n2\n0001652044\nGOOGL\nAlphabet Inc.\n\n\n3\n0001018724\nAMZN\nAMAZON COM INC\n\n\n4\n0001045810\nNVDA\nNVIDIA CORP\n\n\n5\n0001326801\nMETA\nMeta Platforms, Inc.\n\n\n\n\n\n\n\n\nFor our analysis, we’ll use Apple Inc. (AAPL) as the company of interest. The CIK for Apple Inc. is 0000320193.\nLet’s now select Apple Inc. by its CIK and retrieve its data from the SEC. The data we retrieve will be stored in the company_Data object for further analysis:\n\n# Select Apple Inc. (AAPL) by CIK\ncik &lt;- \"0000320193\"  # CIK for Apple Inc.\ncompany_Data &lt;- retrieve_Company_Data(headers, cik)\n\n# this the first row of the company list as a quick check\ncompany_List[1,] %&gt;% kable()\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n\n\n\nBy following these steps, we’ve imported the necessary libraries, sourced relevant files, and initiated the retrieval of financial data from the SEC. In the subsequent chapters, we will delve deeper into exploring and analyzing the SEC data for Apple Inc.\nBefore we move to the next chapter we save the files.\n\n# Load company_Data\nsaveRDS(company_Data, file = \"company_Data.RDS\") \nsaveRDS(cik, file = \"cik.RDS\")"
  },
  {
    "objectID": "01_data_retrieval.html#sec-import-libraries",
    "href": "01_data_retrieval.html#sec-import-libraries",
    "title": "Data Retrieval",
    "section": "",
    "text": "In this chapter, we will explore the process of retrieving financial data from the U.S. Securities and Exchange Commission (SEC) filings. To do this, we will use R and several libraries that facilitate data retrieval and analysis.\nTo start, we need to import the required libraries. These libraries provide functions and tools that enable us to interact with the SEC’s data and perform data analysis. The necessary libraries are listed in setup.qmd."
  },
  {
    "objectID": "01_data_retrieval.html#sourcing-required-files",
    "href": "01_data_retrieval.html#sourcing-required-files",
    "title": "Data Retrieval",
    "section": "",
    "text": "The data retrieval process is orchestrated using a set of functions located in separate R script files. We’ll be sourcing these files via setup.qmd to access the functions for retrieving, processing, and analyzing SEC data.\n\nsource(\"setup.qmd\")           # Sourcing necessary libraries\n\nThis sets the stage for retrieving and working with SEC data efficiently."
  },
  {
    "objectID": "01_data_retrieval.html#sec-retrieve-data",
    "href": "01_data_retrieval.html#sec-retrieve-data",
    "title": "Data Retrieval",
    "section": "",
    "text": "In this example, we will focus on one company, Apple Inc. (AAPL), as the target for our data retrieval.\n\n\nTo access the SEC API, we need to define user headers. These headers will be used for making HTTP requests to the SEC servers. We can set our user agent as an example:\n\n# Define user headers\nheaders &lt;- c('User-Agent' = 'email@address.com')\nkable(headers)\n\n\n\n\n\nx\n\n\n\n\nUser-Agent\nemail@address.com\n\n\n\n\n\nIt’s essential to set user headers as a standard practice when accessing web APIs to identify the source of the requests."
  },
  {
    "objectID": "01_data_retrieval.html#sec-company-list",
    "href": "01_data_retrieval.html#sec-company-list",
    "title": "Data Retrieval",
    "section": "",
    "text": "Our first step in data retrieval is to obtain the list of companies available on the SEC. This list contains essential information, including the Central Index Key (CIK), which uniquely identifies each company that files reports with the SEC. We’ll make an HTTP request to fetch this list:\n\n# Retrieve company list\ncompany_List &lt;- retrieve_Company_List(headers)\nkable(head(company_List))\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n1\n0000789019\nMSFT\nMICROSOFT CORP\n\n\n2\n0001652044\nGOOGL\nAlphabet Inc.\n\n\n3\n0001018724\nAMZN\nAMAZON COM INC\n\n\n4\n0001045810\nNVDA\nNVIDIA CORP\n\n\n5\n0001326801\nMETA\nMeta Platforms, Inc."
  },
  {
    "objectID": "01_data_retrieval.html#selecting-a-company-apple-inc.-aapl",
    "href": "01_data_retrieval.html#selecting-a-company-apple-inc.-aapl",
    "title": "Data Retrieval",
    "section": "",
    "text": "For our analysis, we’ll use Apple Inc. (AAPL) as the company of interest. The CIK for Apple Inc. is 0000320193.\nLet’s now select Apple Inc. by its CIK and retrieve its data from the SEC. The data we retrieve will be stored in the company_Data object for further analysis:\n\n# Select Apple Inc. (AAPL) by CIK\ncik &lt;- \"0000320193\"  # CIK for Apple Inc.\ncompany_Data &lt;- retrieve_Company_Data(headers, cik)\n\n# this the first row of the company list as a quick check\ncompany_List[1,] %&gt;% kable()\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n\n\n\nBy following these steps, we’ve imported the necessary libraries, sourced relevant files, and initiated the retrieval of financial data from the SEC. In the subsequent chapters, we will delve deeper into exploring and analyzing the SEC data for Apple Inc.\nBefore we move to the next chapter we save the files.\n\n# Load company_Data\nsaveRDS(company_Data, file = \"company_Data.RDS\") \nsaveRDS(cik, file = \"cik.RDS\")"
  },
  {
    "objectID": "06_advanced_topics.html",
    "href": "06_advanced_topics.html",
    "title": "Advanced Topics",
    "section": "",
    "text": "Advanced Topics\nWork in progress [..]"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Source key required libraries",
    "section": "",
    "text": "Source key required libraries\nlibrary(tidyverse) library(httr) library(jsonlite) library(magrittr) library(tibble) library(knitr)\n\n\nSource required functions\nsource(“../code/Functions/data_retrieval.R”) # Sourcing the data retrieval functions source(“../code/Functions/data_analysis.R”) # Sourcing the data analysis functions source(“../code/Functions/data_visualization.R”) # Sourcing the data visualization functions source(“../code/Functions/utils.R”) # Sourcing utility functions"
  }
]