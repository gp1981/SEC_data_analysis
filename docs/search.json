[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction and Overview",
    "section": "",
    "text": "The primary purpose of this project is to retrieve company data from SEC filings and analyze it for educational and research purposes. Please note that the scripts provided here are not intended for making investment decisions, and their use is at your own risk.\n\n\n\nThis financial data retrieval code is provided for informational purposes only, and we make no warranties regarding the accuracy, completeness, or timeliness of the data. It should not be considered financial advice, and users should consult with qualified professionals for personalized guidance. Data is obtained from various sources, including the SEC, and we do not guarantee its accuracy or availability. Users are responsible for assessing and managing risks associated with the financial data. We are not liable for any damages arising from the use of this data or code. Redistribution, resale, or republication of the data without authorization is prohibited. This disclaimer is subject to change, and users are responsible for staying updated. It is not legal advice, and compliance with applicable laws and regulations is the user’s responsibility."
  },
  {
    "objectID": "index.html#purpose-of-this-project",
    "href": "index.html#purpose-of-this-project",
    "title": "Introduction and Overview",
    "section": "",
    "text": "The primary purpose of this project is to retrieve company data from SEC filings and analyze it for educational and research purposes. Please note that the scripts provided here are not intended for making investment decisions, and their use is at your own risk."
  },
  {
    "objectID": "index.html#disclaimer",
    "href": "index.html#disclaimer",
    "title": "Introduction and Overview",
    "section": "",
    "text": "This financial data retrieval code is provided for informational purposes only, and we make no warranties regarding the accuracy, completeness, or timeliness of the data. It should not be considered financial advice, and users should consult with qualified professionals for personalized guidance. Data is obtained from various sources, including the SEC, and we do not guarantee its accuracy or availability. Users are responsible for assessing and managing risks associated with the financial data. We are not liable for any damages arising from the use of this data or code. Redistribution, resale, or republication of the data without authorization is prohibited. This disclaimer is subject to change, and users are responsible for staying updated. It is not legal advice, and compliance with applicable laws and regulations is the user’s responsibility."
  },
  {
    "objectID": "advanced_topics.html",
    "href": "advanced_topics.html",
    "title": "Advanced Topics",
    "section": "",
    "text": "Advanced Topics"
  },
  {
    "objectID": "data_analysis.html",
    "href": "data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "Data Analysis"
  },
  {
    "objectID": "data_retrieval.html",
    "href": "data_retrieval.html",
    "title": "Data Retrieval",
    "section": "",
    "text": "In this chapter, we will explore the process of retrieving financial data from the U.S. Securities and Exchange Commission (SEC) filings. To do this, we will use R and several libraries that facilitate data retrieval and analysis.\nTo start, we need to import the required libraries. These libraries provide functions and tools that enable us to interact with the SEC’s data and perform data analysis. The necessary libraries are listed in setup.qmd.\n\n\n\nThe data retrieval process is orchestrated using a set of functions located in separate R script files. We’ll be sourcing these files in the main script (main_script.R) to access the functions for retrieving, processing, and analyzing SEC data.\nLet’s start by sourcing the required files and libraries. We collected all requirements in setup.qmd:\n\n\n[1] \"Setup completed\"\n\n\nThis sets the stage for retrieving and working with SEC data efficiently.\n\n\n\nNow that we have imported the necessary libraries and sourced the required files, we can move on to retrieving financial data from the SEC. In this example, we will focus on one company, Apple Inc. (AAPL), as the target for our data retrieval.\n\n\nTo access the SEC API, we need to define user headers. These headers will be used for making HTTP requests to the SEC servers. We can set our user agent as an example:\n\n# Define user headers\nheaders &lt;- c('User-Agent' = 'email@address.com')\nkable(headers)\n\n\n\n\n\nx\n\n\n\n\nUser-Agent\nemail@address.com\n\n\n\n\n\nIt’s essential to set user headers as a standard practice when accessing web APIs to identify the source of the requests.\n\n\n\n\nOur first step in data retrieval is to obtain the list of companies available on the SEC. This list contains essential information, including the Central Index Key (CIK), which uniquely identifies each company that files reports with the SEC. We’ll make an HTTP request to fetch this list:\n\n# Retrieve company list\ncompany_List &lt;- retrieve_Company_List(headers)\nkable(head(company_List))\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n1\n0000789019\nMSFT\nMICROSOFT CORP\n\n\n2\n0001652044\nGOOGL\nAlphabet Inc.\n\n\n3\n0001018724\nAMZN\nAMAZON COM INC\n\n\n4\n0001045810\nNVDA\nNVIDIA CORP\n\n\n5\n0001326801\nMETA\nMeta Platforms, Inc.\n\n\n\n\n\n\n\n\nFor our analysis, we’ll use Apple Inc. (AAPL) as the company of interest. The CIK for Apple Inc. is 0000320193.\nLet’s now select Apple Inc. by its CIK and retrieve its data from the SEC. The data we retrieve will be stored in the company_Data object for further analysis:\n\n# Select Apple Inc. (AAPL) by CIK\ncik &lt;- \"0000320193\"  # CIK for Apple Inc.\ncompany_Data &lt;- retrieve_Company_Data(headers, cik)\n\n# this the first row of the company list as a quick check\ncompany_List[1,] %&gt;% kable()\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n\n\n\nBy following these steps, we’ve imported the necessary libraries, sourced relevant files, and initiated the retrieval of financial data from the SEC. In the subsequent chapters, we will delve deeper into exploring and analyzing the SEC data for Apple Inc.\nBefore we move to the next chapter we save the files.\n\n# Load company_Data\nsaveRDS(company_Data, file = \"company_Data.RDS\")\nsaveRDS(cik, file = \"cik.RDS\")"
  },
  {
    "objectID": "data_retrieval.html#sec-import-libraries",
    "href": "data_retrieval.html#sec-import-libraries",
    "title": "Data Retrieval",
    "section": "",
    "text": "In this chapter, we will explore the process of retrieving financial data from the U.S. Securities and Exchange Commission (SEC) filings. To do this, we will use R and several libraries that facilitate data retrieval and analysis.\nTo start, we need to import the required libraries. These libraries provide functions and tools that enable us to interact with the SEC’s data and perform data analysis. The necessary libraries are listed in setup.qmd."
  },
  {
    "objectID": "data_retrieval.html#sourcing-required-files",
    "href": "data_retrieval.html#sourcing-required-files",
    "title": "Data Retrieval",
    "section": "",
    "text": "The data retrieval process is orchestrated using a set of functions located in separate R script files. We’ll be sourcing these files in the main script (main_script.R) to access the functions for retrieving, processing, and analyzing SEC data.\nLet’s start by sourcing the required files and libraries. We collected all requirements in setup.qmd:\n\n\n[1] \"Setup completed\"\n\n\nThis sets the stage for retrieving and working with SEC data efficiently."
  },
  {
    "objectID": "data_retrieval.html#sec-retrieve-data",
    "href": "data_retrieval.html#sec-retrieve-data",
    "title": "Data Retrieval",
    "section": "",
    "text": "Now that we have imported the necessary libraries and sourced the required files, we can move on to retrieving financial data from the SEC. In this example, we will focus on one company, Apple Inc. (AAPL), as the target for our data retrieval.\n\n\nTo access the SEC API, we need to define user headers. These headers will be used for making HTTP requests to the SEC servers. We can set our user agent as an example:\n\n# Define user headers\nheaders &lt;- c('User-Agent' = 'email@address.com')\nkable(headers)\n\n\n\n\n\nx\n\n\n\n\nUser-Agent\nemail@address.com\n\n\n\n\n\nIt’s essential to set user headers as a standard practice when accessing web APIs to identify the source of the requests."
  },
  {
    "objectID": "data_retrieval.html#sec-company-list",
    "href": "data_retrieval.html#sec-company-list",
    "title": "Data Retrieval",
    "section": "",
    "text": "Our first step in data retrieval is to obtain the list of companies available on the SEC. This list contains essential information, including the Central Index Key (CIK), which uniquely identifies each company that files reports with the SEC. We’ll make an HTTP request to fetch this list:\n\n# Retrieve company list\ncompany_List &lt;- retrieve_Company_List(headers)\nkable(head(company_List))\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n1\n0000789019\nMSFT\nMICROSOFT CORP\n\n\n2\n0001652044\nGOOGL\nAlphabet Inc.\n\n\n3\n0001018724\nAMZN\nAMAZON COM INC\n\n\n4\n0001045810\nNVDA\nNVIDIA CORP\n\n\n5\n0001326801\nMETA\nMeta Platforms, Inc."
  },
  {
    "objectID": "data_retrieval.html#selecting-a-company-apple-inc.-aapl",
    "href": "data_retrieval.html#selecting-a-company-apple-inc.-aapl",
    "title": "Data Retrieval",
    "section": "",
    "text": "For our analysis, we’ll use Apple Inc. (AAPL) as the company of interest. The CIK for Apple Inc. is 0000320193.\nLet’s now select Apple Inc. by its CIK and retrieve its data from the SEC. The data we retrieve will be stored in the company_Data object for further analysis:\n\n# Select Apple Inc. (AAPL) by CIK\ncik &lt;- \"0000320193\"  # CIK for Apple Inc.\ncompany_Data &lt;- retrieve_Company_Data(headers, cik)\n\n# this the first row of the company list as a quick check\ncompany_List[1,] %&gt;% kable()\n\n\n\n\n\ncik_str\nticker\ntitle\n\n\n\n\n0\n0000320193\nAAPL\nApple Inc.\n\n\n\n\n\nBy following these steps, we’ve imported the necessary libraries, sourced relevant files, and initiated the retrieval of financial data from the SEC. In the subsequent chapters, we will delve deeper into exploring and analyzing the SEC data for Apple Inc.\nBefore we move to the next chapter we save the files.\n\n# Load company_Data\nsaveRDS(company_Data, file = \"company_Data.RDS\")\nsaveRDS(cik, file = \"cik.RDS\")"
  },
  {
    "objectID": "data_exploration.html",
    "href": "data_exploration.html",
    "title": "Explore data retrieved from SEC",
    "section": "",
    "text": "In this section, we will explore the structure of the SEC data retrieved from the API. The data is organized in a structured format compliant with SEC reporting standards. Understanding this structure is crucial for effective analysis.\n\n\nThe structure the data retrieved from SEC API is a structured financial data in compliance with SEC reporting standards.The SEC data is organized in XBRL (eXtensible Business Reporting Language), which is a structured, machine-readable format. It ensures consistency and comparability of financial data across different companies and filings.\nIn practice, if you want to analyze specific financial metrics like “Assets,” you would navigate through the structure to access the corresponding “fact” under the relevant “concept.” This allows you to extract and work with financial data for analysis or reporting. The structure includes:\n\ncik: This is the Central Index Key (CIK) of the company. It’s a unique identifier assigned to each company that files reports with the U.S. Securities and Exchange Commission (SEC).\nentityName: This is the name of the company, in this case, “Apple Inc.”\nfacts: This is the main container for financial data. Within “facts,” you have two main sections:\n\ndei: This section contains financial data related to Document and Entity Information (DEI). DEI data includes basic company information, such as the entity’s common stock shares outstanding and the entity’s public float.\nus-gaap: This section contains financial data that follows the U.S. Generally Accepted Accounting Principles (GAAP). It includes a wide range of financial concepts, which are organized as a list of financial items.\n\n\nWithin these sections, you’ll find the actual financial data represented as a list of items. Each item has specific attributes that describe the financial information:\n\nConcept: A “concept” represents a specific financial measure or item. For example, “Assets” or “AccountsPayable” are concepts. Each concept has an associated label and a data type.\nFacts: Under each concept, you have “facts.” These are the actual numerical values or data associated with the concept. For example, “Assets” will have a fact that represents the total assets value for the company. Facts typically have attributes like “value,” “unitRef,” and “contextRef.”\nAttributes: Facts may have additional attributes that provide context for the data, such as the reporting period, currency unit, or the precision of the data.\n\nTo analyze and work with this data effectively, you would typically need to select specific concepts and facts that are relevant to your analysis, and you may also need to transform or pivot the data into a more tabular format for further processing and visualization.\nWe split the data in company_Data into separate Lists: company_Metadata, company_Facts, company_Concept\n\n# Load the required libraries\nsource(\"setup.qmd\")\n\n# Split the lists in company_Data\ncompany_Metadata &lt;- company_Data$company_Metadata\ncompany_Facts &lt;- company_Data$company_Facts\ncompany_Concept &lt;- company_Data$company_Concept\n\n\n\nYou can see the structure in textual format:\n\n# Load the required libraries\nsource(\"setup.qmd\") \n\n# Visualize structure of the company_Metadata with a collapsible section\nstr(company_Metadata) %&gt;% kable()\n\n NULL\n\n\n\n\n\nAs you can see the structure of company_Data is large and complex.\n\n\n\nLet’s create now a first dataframe:\n\n# Load the required libraries\nsource(\"setup.qmd\") \n\n# Create a DataFrame with relevant data\ncompany_df &lt;- data.frame(\n  CIK = cik,\n  Name = company_Metadata$name,\n  FiscalYearEnd = company_Metadata$fiscalYearEnd,\n  AssetsLabel = company_Facts$facts$`us-gaap`$Assets$label,\n  AssetsDescription = company_Facts$facts$`us-gaap`$Assets$description\n  # Add more relevant columns here\n)\nkable(company_df)\n\n\n\n\nCIK\n\n\n\n\n\n\n\n\n\n\nLet’s say that we want to recreate a summary version of the balance sheet of Apple Inc. based on the last filing. The dataframe would be generated in the following way:\n\n# Load the required libraries\nsource(\"setup.qmd\") \n\n# Extract detailed information for the Balance Sheet summary\ndetailed_balance_sheet_summary &lt;- data.frame(\n  CIK = cik,\n  Name = company_Metadata$name,\n  FiscalYearEnd = company_Metadata$fiscalYearEnd,\n  CashAndCashEquivalents = company_Facts$facts$`us-gaap`$CashAndCashEquivalentsAtCarryingValue$units$USD$val\n)\n\n# Add a FiscalYear column\n# detailed_balance_sheet_summary &lt;- detailed_balance_sheet_summary %&gt;%\n#   mutate(FiscalYear = as.character(FiscalYearEnd))\n\n# Format the CashAndCashEquivalents column\n# detailed_balance_sheet_summary$CashAndCashEquivalents_Millions &lt;- format(\n#   detailed_balance_sheet_summary$CashAndCashEquivalents / 1e6,\n#   big.mark = \",\",\n#   scientific = FALSE\n# )\n# \n# # Add a column for unit of measure\n# detailed_balance_sheet_summary$CashAndCashEquivalents_Unit &lt;- paste0(\n#   detailed_balance_sheet_summary$CashAndCashEquivalents_Million, \" USD (millions)\"\n# )\n# \n#   # AccountsReceivable = company_Facts$facts$`us-gaap`$AccountsReceivableNet$value,\n#   # Inventory = company_Facts$facts$`us-gaap`$InventoryNet$value,\n#   # TotalCurrentAssets = company_Facts$facts$`us-gaap`$AssetsCurrent$value,\n#   # PropertyPlantAndEquipment = company_Facts$facts$`us-gaap`$PropertyPlantAndEquipmentNet$value,\n#   # TotalAssets = company_Facts$facts$`us-gaap`$Assets$value,\n#   # AccountsPayable = company_Facts$facts$`us-gaap`$AccountsPayableCurrent$value,\n#   # TotalShortTermDebtsAndLeasing = company_Facts$facts$`us-gaap`$DebtCurrent$value,\n#   # TotalCurrentLiabilities = company_Facts$facts$`us-gaap`$LiabilitiesCurrent$value,\n#   # TotalLongTermDebtsAndLeasing = company_Facts$facts$`us-gaap`$DebtNoncurrent$value,\n#   # TotalLiabilities = company_Facts$facts$`us-gaap`$Liabilities$value,\n#   # CommonStock = company_Facts$facts$`us-gaap`$CommonStockSharesOutstanding$value,\n#   # PreferredStock = company_Facts$facts$`us-gaap`$PreferredStockValue$value,\n#   # RetainedEarnings = company_Facts$facts$`us-gaap`$RetainedEarningsAccumulatedDeficit$value,\n#   # AdditionalPaidInCapital = company_Facts$facts$`us-gaap`$AdditionalPaidInCapital$value,\n#   # TreasuryStock = company_Facts$facts$`us-gaap`$TreasuryStockValue$value,\n#   # TotalStockholdersEquity = company_Facts$facts$`us-gaap`$StockholdersEquity$value,\n#   # MinorityInterest = company_Facts$facts$`us-gaap`$MinorityInterest$value\n# # )\n# # \n# # Display the formatted summary dataframe\n# kable(detailed_balance_sheet_summary[, c(\"CIK\", \"Name\", \"FiscalYear\", \"CashAndCashEquivalents_Unit\")])\n#"
  },
  {
    "objectID": "data_exploration.html#structure-of-the-sec-data-xbrl",
    "href": "data_exploration.html#structure-of-the-sec-data-xbrl",
    "title": "Explore data retrieved from SEC",
    "section": "",
    "text": "The structure the data retrieved from SEC API is a structured financial data in compliance with SEC reporting standards.The SEC data is organized in XBRL (eXtensible Business Reporting Language), which is a structured, machine-readable format. It ensures consistency and comparability of financial data across different companies and filings.\nIn practice, if you want to analyze specific financial metrics like “Assets,” you would navigate through the structure to access the corresponding “fact” under the relevant “concept.” This allows you to extract and work with financial data for analysis or reporting. The structure includes:\n\ncik: This is the Central Index Key (CIK) of the company. It’s a unique identifier assigned to each company that files reports with the U.S. Securities and Exchange Commission (SEC).\nentityName: This is the name of the company, in this case, “Apple Inc.”\nfacts: This is the main container for financial data. Within “facts,” you have two main sections:\n\ndei: This section contains financial data related to Document and Entity Information (DEI). DEI data includes basic company information, such as the entity’s common stock shares outstanding and the entity’s public float.\nus-gaap: This section contains financial data that follows the U.S. Generally Accepted Accounting Principles (GAAP). It includes a wide range of financial concepts, which are organized as a list of financial items.\n\n\nWithin these sections, you’ll find the actual financial data represented as a list of items. Each item has specific attributes that describe the financial information:\n\nConcept: A “concept” represents a specific financial measure or item. For example, “Assets” or “AccountsPayable” are concepts. Each concept has an associated label and a data type.\nFacts: Under each concept, you have “facts.” These are the actual numerical values or data associated with the concept. For example, “Assets” will have a fact that represents the total assets value for the company. Facts typically have attributes like “value,” “unitRef,” and “contextRef.”\nAttributes: Facts may have additional attributes that provide context for the data, such as the reporting period, currency unit, or the precision of the data.\n\nTo analyze and work with this data effectively, you would typically need to select specific concepts and facts that are relevant to your analysis, and you may also need to transform or pivot the data into a more tabular format for further processing and visualization.\nWe split the data in company_Data into separate Lists: company_Metadata, company_Facts, company_Concept\n\n# Load the required libraries\nsource(\"setup.qmd\")\n\n# Split the lists in company_Data\ncompany_Metadata &lt;- company_Data$company_Metadata\ncompany_Facts &lt;- company_Data$company_Facts\ncompany_Concept &lt;- company_Data$company_Concept\n\n\n\nYou can see the structure in textual format:\n\n# Load the required libraries\nsource(\"setup.qmd\") \n\n# Visualize structure of the company_Metadata with a collapsible section\nstr(company_Metadata) %&gt;% kable()\n\n NULL\n\n\n\n\n\nAs you can see the structure of company_Data is large and complex.\n\n\n\nLet’s create now a first dataframe:\n\n# Load the required libraries\nsource(\"setup.qmd\") \n\n# Create a DataFrame with relevant data\ncompany_df &lt;- data.frame(\n  CIK = cik,\n  Name = company_Metadata$name,\n  FiscalYearEnd = company_Metadata$fiscalYearEnd,\n  AssetsLabel = company_Facts$facts$`us-gaap`$Assets$label,\n  AssetsDescription = company_Facts$facts$`us-gaap`$Assets$description\n  # Add more relevant columns here\n)\nkable(company_df)\n\n\n\n\nCIK\n\n\n\n\n\n\n\n\n\n\nLet’s say that we want to recreate a summary version of the balance sheet of Apple Inc. based on the last filing. The dataframe would be generated in the following way:\n\n# Load the required libraries\nsource(\"setup.qmd\") \n\n# Extract detailed information for the Balance Sheet summary\ndetailed_balance_sheet_summary &lt;- data.frame(\n  CIK = cik,\n  Name = company_Metadata$name,\n  FiscalYearEnd = company_Metadata$fiscalYearEnd,\n  CashAndCashEquivalents = company_Facts$facts$`us-gaap`$CashAndCashEquivalentsAtCarryingValue$units$USD$val\n)\n\n# Add a FiscalYear column\n# detailed_balance_sheet_summary &lt;- detailed_balance_sheet_summary %&gt;%\n#   mutate(FiscalYear = as.character(FiscalYearEnd))\n\n# Format the CashAndCashEquivalents column\n# detailed_balance_sheet_summary$CashAndCashEquivalents_Millions &lt;- format(\n#   detailed_balance_sheet_summary$CashAndCashEquivalents / 1e6,\n#   big.mark = \",\",\n#   scientific = FALSE\n# )\n# \n# # Add a column for unit of measure\n# detailed_balance_sheet_summary$CashAndCashEquivalents_Unit &lt;- paste0(\n#   detailed_balance_sheet_summary$CashAndCashEquivalents_Million, \" USD (millions)\"\n# )\n# \n#   # AccountsReceivable = company_Facts$facts$`us-gaap`$AccountsReceivableNet$value,\n#   # Inventory = company_Facts$facts$`us-gaap`$InventoryNet$value,\n#   # TotalCurrentAssets = company_Facts$facts$`us-gaap`$AssetsCurrent$value,\n#   # PropertyPlantAndEquipment = company_Facts$facts$`us-gaap`$PropertyPlantAndEquipmentNet$value,\n#   # TotalAssets = company_Facts$facts$`us-gaap`$Assets$value,\n#   # AccountsPayable = company_Facts$facts$`us-gaap`$AccountsPayableCurrent$value,\n#   # TotalShortTermDebtsAndLeasing = company_Facts$facts$`us-gaap`$DebtCurrent$value,\n#   # TotalCurrentLiabilities = company_Facts$facts$`us-gaap`$LiabilitiesCurrent$value,\n#   # TotalLongTermDebtsAndLeasing = company_Facts$facts$`us-gaap`$DebtNoncurrent$value,\n#   # TotalLiabilities = company_Facts$facts$`us-gaap`$Liabilities$value,\n#   # CommonStock = company_Facts$facts$`us-gaap`$CommonStockSharesOutstanding$value,\n#   # PreferredStock = company_Facts$facts$`us-gaap`$PreferredStockValue$value,\n#   # RetainedEarnings = company_Facts$facts$`us-gaap`$RetainedEarningsAccumulatedDeficit$value,\n#   # AdditionalPaidInCapital = company_Facts$facts$`us-gaap`$AdditionalPaidInCapital$value,\n#   # TreasuryStock = company_Facts$facts$`us-gaap`$TreasuryStockValue$value,\n#   # TotalStockholdersEquity = company_Facts$facts$`us-gaap`$StockholdersEquity$value,\n#   # MinorityInterest = company_Facts$facts$`us-gaap`$MinorityInterest$value\n# # )\n# # \n# # Display the formatted summary dataframe\n# kable(detailed_balance_sheet_summary[, c(\"CIK\", \"Name\", \"FiscalYear\", \"CashAndCashEquivalents_Unit\")])\n#"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Source key required libraries",
    "section": "",
    "text": "Source key required libraries\nlibrary(tidyverse) library(httr) library(jsonlite) library(magrittr) library(tibble) library(knitr)\n\n\nSource required functions\nsource(“../code/Functions/data_retrieval.R”) # Sourcing the data retrieval functions source(“../code/Functions/data_analysis.R”) # Sourcing the data analysis functions source(“../code/Functions/data_visualization.R”) # Sourcing the data visualization functions source(“../code/Functions/utils.R”) # Sourcing utility functions\n\n\nLoad necessary data files, or create placeholder files if not present\nif (file.exists(“company_data.RDS”)) { company_Data &lt;- readRDS(“company_data.RDS”) } else { # Create a placeholder, you can modify this based on your actual data structure company_Data &lt;- list() saveRDS(company_Data, “company_data.RDS”) }\nif (file.exists(“cik.RDS”)) { cik &lt;- readRDS(“cik.RDS”)\n} else { # Create a placeholder, you can modify this based on your actual data structure cik &lt;- character() saveRDS(cik, “cik.RDS”) }"
  }
]