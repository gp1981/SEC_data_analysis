# Explore data retrieved from SEC

In this section, we delve into the structure of the SEC data obtained from the API. The data follows a structured format in compliance with SEC reporting standards, and understanding this structure is vital for effective analysis.

First, we load the required libraries and files.

```{r Functions_source, message=FALSE, warning=FALSE}
source("setup.qmd")          
```

Now, let's retrieve the necessary objects for data exploration:

```{r load_object1, eval=TRUE, warning=FALSE, message=FALSE}
# Load company_Data
company_Data <- readRDS("company_data.RDS")
cik <- readRDS("cik.RDS")
```

## Structure of the SEC data: XBRL

The data retrieved from the SEC API is structured financial data compliant with SEC reporting standards. It utilizes XBRL (eXtensible Business Reporting Language), a structured, machine-readable format ensuring consistency and comparability across companies and filings.

To navigate through this structure for analysis, consider the following key elements:

-   **`cik`**: The Central Index Key (CIK) is a unique identifier assigned to each company filing reports with the U.S. Securities and Exchange Commission (SEC).

-   **`entityName`**: This is the name of the company, such as "Apple Inc."

-   **`facts`**: The main container for financial data, housing two critical sections:

    -   **`dei`**: Contains Document and Entity Information (DEI), providing basic company details.

    -   **`us-gaap`**: Holds financial data following the U.S. Generally Accepted Accounting Principles (GAAP).

Within these sections, financial data is organized as a list of items, each with specific attributes:

-   **Concept**: Represents a financial measure or item (e.g., "Assets") with an associated label and data type.

-   **Facts**: Actual numerical values associated with the concept, with attributes like "value," "unitRef," and "contextRef."

-   **Attributes**: Additional attributes providing context for the data, such as reporting period, currency unit, or data precision.

Effectively analyzing this data involves selecting relevant concepts and `Fact`, potentially transforming or pivoting the data for further processing and visualization.

### Understanding the dataset: `company_Data`

Let's start by exploring the structure of **`company_Data`**:

```{r str_company_Data, eval=TRUE, message=FALSE,warning=FALSE}
# Visualize structure of the company_Data 
str(company_Data, max.level = 1)
```

The output reveals that **`company_Data`** comprises three lists with nested lists, such as **`company_Metadata`** with 22 lists.

::: {#Note_List .Note style="background-color: #f0f0f0; padding: 10px; color: gray"}

------------------------------------------------------------------------

*In R, a **list** is a versatile data structure capable of holding elements of different data types. It offers flexibility, allowing each element to be of a different type.*

*For **`company_Data`**, the list structure organizes various pieces of information, accommodating different data types. Understanding this structure is crucial for navigating and extracting specific information from complex datasets.*

------------------------------------------------------------------------
:::

To access the lists we use the symbol `$` in after the object e.g. `company_Data$company_Metadata`.

Next, we split the data into separate lists: **`company_Metadata`**, **`company_Facts`**, **`company_Concept`**.

```{r split_company_Data, eval=TRUE, warning=FALSE, message=FALSE}
# Split the lists in company_Data
company_Metadata <- company_Data$company_Metadata
company_Facts <- company_Data$company_Facts
company_Concept <- company_Data$company_Concept
```

Now, let's examine the structures and content of these lists:

#### Company Metadata

Let's start with `company_Metadata` which includes 22 elements: characters, integer, sub-list (or nested list), etc.

```{r view_company_Metadata, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Metadata
str(company_Metadata, max.level = 1)
```

The most relevant information of `company_Metadata` are included in the elemnent `filing` which is a nested list and contains the filing attributes.

```{r str_company_Metadata_Filing, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Metadata
str(company_Metadata$filing, max.level = 2)
```

The format of the dataset as printed is not very useful. We see that there are useful information on the forms (e.g. 10K) and dates (e.g. filing dates).

For now we will keep it as is and we will come back later on how to improve the readibility

#### Company Facts

`company_Facts` is relatively simple and is a list of 3 elements.

```{r view_company_Facts, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Facts
str(company_Facts, max.level = 1)
```

The last element `company_Facts$facts` is the most relevant one.

```{r view_company_Facts2, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Facts
str(company_Facts$facts, max.level = 1)
```

The **`us-gaap`** list is the most significant sub-element of Facts, containing 498 nested sub-sub-elements. Let's examine the first five.

```{r str_company_Facts_us_gaap_head, eval=TRUE, warning=FALSE, message=FALSE}

# Visualize structure of the company_Facts
Facts_us_gaap <- str(company_Facts$facts$`us-gaap`[1:5], max.level = 1)
```

These sub-elements include essential fundamentals of the company and are themselves nested lists. Let's explore the structure of the first one.

```{r str_company_Facts_us_gaap, eval=TRUE, warning=FALSE, message=FALSE}

# Visualize structure of the company_Facts
str(company_Facts$facts$`us-gaap`[1], max.level = 4)
```

The output presents the structure of the information related to the first element: `AccountsPayable`

-   **AccountsPayable**: Represents a financial concept within the **`us-gaap`** section, specifically referring to "Accounts Payable (Deprecated 2009-01-31)."

    -   **`label`**: This column represents the financial concept or measure, such as "Accounts Payable (Deprecated 2009-01-31)."

    -   **`description`**: A detailed explanation of the concept, providing insight into the carrying value as of the balance sheet date.

    -   **`units`**: A data frame with 2 observations and 8 variables. The variables include information such as:

        -   `end`: Indicates the end date of the reporting period associated with the financial data.

        -   `val`: Represents the numerical value associated with the financial concept. It includes the unit of measure (e.g., million - "M").

        -   `accn`: Stands for accession number, a unique identifier assigned by the SEC to each submission.

        -   `fy`: Represents the fiscal year associated with the financial data

        -   `fp`: Represents the fiscal period (e.g., Q3 for the third quarter, FY for the full fiscal year).

        -   `form`: Indicates the type of form filed with the SEC (e.g., 10-Q for quarterly reports, 10-K for annual reports).

        -   `filed`: Represents the date on which the form was filed with the SEC.

        -   `frame` Provides information about the frame, and in this case, it appears to be a combination of calendar year, fiscal quarter, and an additional identifier. For instance "CY2008Q3I" suggests a possible combination of calendar year (CY), year (2008), fiscal quarter (Q3), and possibly an additional identifier ("I")

This hierarchical structure provides a detailed view of the financial concept "Accounts Payable (Deprecated 2009-01-31)" within the **`us-gaap`** section, including its label, description, and historical data with unit details.

::: {#Note_List2 .Note style="background-color: #f0f0f0; padding: 10px;"}

------------------------------------------------------------------------

*Most of the SEC data required for fundamentals analysis is included in a structure of nested lists. Its understanding is critical to properly retrieve the data. Once we automate the process of "un-nesting" the lists, we will be able to verify that this process led to a dataframe structure where the data is properly located.*

------------------------------------------------------------------------
:::

#### Company Concept

Finally, let's examine the structure associated with the company's Concept.

```{r str_company_Concept, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Concepts
str(company_Concept, max.level = 3)
```

The output shows the structure associated with the `Asset` of the company under the taxonomy of `us-gaap`.

### Rebuilding the financial reports

Let's create now a dataframe including the data retrieved from `` company_Facts$facts$`us-gaap` ``.

#### Extracting financial data

The first step is un-nest the dataset, in particular the financial data, in `company_Facts`, nested in various sub-lists.

The following code can be used to un-nest the list within `company_Facts` and create a dataframe easy to visualize and useful for our purpose[^02_data_exploration-1].

[^02_data_exploration-1]: For visualization purpose we have omitted from the pritned table the variables (columns) `df_Facts$description` and `df_Facts$accn`.

```{r unnesting_company_Facts, message=FALSE, warning=FALSE, message=FALSE}

df_Facts <- FactsList_to_Dataframe(company_Facts$facts$`us-gaap`)

# Select the columns to print out and present the output with wrapped text and formatted numbers
df_Facts %>%   select(-c(description,accn)) %>% 
  head() %>% kable("html") %>%  
  kable_styling(full_width = FALSE)
```

The data in this dataframe is organized to facilitate analysis and comparison of financial information over different periods. Each row corresponds to a specific financial concept (e.g. Accounts Payable) reported by the company, and the columns provide details about the reporting period, values, and other relevant attributes.

To recreate a financial statement from the data in `df_Facts` of Apple Inc., we need to extract the values of the various Concepts and corresponding date in `df_Fact$end`.

`df_Fact` has a long list of Concepts for multiple fiscal periods. The following is to show the large number of Concepts included in df_Fact\`, related to all financial reports.

```{r summarize_Facts1, message=FALSE, warning=FALSE, message=FALSE}
# Show the size and first rows of df_Facts (excluding long text for visualization purpose)
df_Fact_lenght <- df_Facts %>% nrow()
  
  # Print the size in human-readable format
cat("df_Facts includes:", format(df_Fact_lenght, units = "auto"), "records \n")
```

```{r summarize_Facts2, message=FALSE, warning=FALSE, message=FALSE}
# Show the size and first rows of df_Facts (excluding long text for visualization purpose)
df_Facts %>% select(-c(description,accn)) %>% 
  head() %>% as.data.frame() %>% 
  kable("html") %>% 
  kable_styling(full_width = FALSE)
```

From the extract of the `df_Facts` above, we see repeated Concepts. Each of them is associated with a different fiscal period.  By grouping these records by date indicated in `df_Fact$end` we can see the the full financial report for each period

```{r summarize_Facts3, message=FALSE, warning=FALSE, message=FALSE}
# Group the df_Fact by date in df_Fact$end
df_Fact_BS <- df_Facts %>% group_by(end) %>% arrange(desc(end))

# Show first rows of df_Facts_BS 
df_Fact_BS %>%  select(-c(description,accn)) %>% 
  head() %>% as.data.frame() %>% 
  kable("html") %>% 
  kable_styling(full_width = FALSE) %>% 
  column_spec(1,width = "250px")
```

The next step is to filter the relevant Concepts associated with each statement: Balance Sheet (BS), Income Statement (IS) Cash Flow (CF).

#### Balance Sheet
The following code will create a standardized Balance Sheet (`df_std_BS`) based on a matching table in excel, part of the repository of this website. The excel is: standardized_balancehseet.xlsx

```{r standardized_BS, message=FALSE, warning=FALSE, message=FALSE}
# Read the standardized_balancesheet.xlsx file
standardized_balancesheet <- read_excel("../data/standardized_balancesheet.xlsx", sheet = "Sheet1")


# Select relevant columns from df_Facts
df_Facts_subset <- df_Facts %>%
  select(label, end, fy, fp, form, val)

# Merge with standardized_balancesheet to get the corresponding df_Facts_label
df_std_BS <- df_Facts_subset %>%
  left_join(standardized_balancesheet, by = c("label" = "df_Facts_label"))

# Filter out records not associated with standardized_balancesheet
df_std_BS <- df_std_BS %>% 
  filter(!is.na(standardized_balancesheet_label)) %>% 
  select(-c(label, df_Fact_Description))

# Pivot the data to the desired structure
df_std_BS <- df_std_BS %>%
  pivot_wider(
    names_from = standardized_balancesheet_label,
    values_from = val
    ) %>% 
  arrange(desc(end))

# Reorder columns dynamically based on the order in standardized_balancesheet
column_order <- standardized_balancesheet$standardized_balancesheet_label

# Check if each column in column_order exists in df_std_BS, if not, remove it from the order
column_order <- column_order[column_order %in% colnames(df_std_BS)]

# Reorder columns for better readability
df_std_BS <- df_std_BS[, c("end", "fy", "fp", "form", column_order)]

# Print the resulting data.frame
df_std_BS %>% head() %>% as.data.frame() %>% 
  kable("html") %>% 
  kable_styling(
    full_width = TRUE,
    bootstrap_options = c("striped", "hover", "condensed"),
    font_size = 8  # Adjust the font size as needed
  ) %>% 
  column_spec(1, width = "200px")  # Adjust the width as needed for other columns

```


#### Income Statement

(work in progress ...)

#### Cash Flow

(work in progress ...)

## Standardization of financial reports

The use of specific labels to indicate financial report items is regulated by accounting standards set forth by authoritative bodies. In the United States, the Financial Accounting Standards Board (FASB) establishes generally accepted accounting principles (GAAP), which provide guidelines for the preparation of financial statements, including the standardization of labels and concepts.

Different comapnies may use different similar labels to indicate similar Facts. The use of different labels however affect the ability to efficient retrieve

The objective is to generate standardized financial reports of Balance sheet, Income Statement, Cash Flow that so that we can use the same label to perform specific calculation across all companies.

(work in progress ...)
