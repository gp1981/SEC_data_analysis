# Explore data retrieved from SEC

In this section, we delve into the structure of the SEC data obtained from the API. The data follows a structured format in compliance with SEC reporting standards, and understanding this structure is vital for effective analysis.

First, we load the required libraries and files.

```{r Functions_source, message=FALSE, warning=FALSE}
source("setup.qmd")          
```

Now, let's retrieve the necessary objects for data exploration:

```{r load_object1, eval=TRUE, warning=FALSE, message=FALSE}
# Load company_Data
company_Data <- readRDS("company_data.RDS")
cik <- readRDS("cik.RDS")
```

## Structure of the SEC data: XBRL

The data retrieved from the SEC API is structured financial data compliant with SEC reporting standards. It utilizes XBRL (eXtensible Business Reporting Language), a structured, machine-readable format ensuring consistency and comparability across companies and filings.

To navigate through this structure for analysis, consider the following key elements:

-   **`cik`**: The Central Index Key (CIK) is a unique identifier assigned to each company filing reports with the U.S. Securities and Exchange Commission (SEC).

-   **`entityName`**: This is the name of the company, such as "Apple Inc."

-   **`facts`**: The main container for financial data, housing two critical sections:

    -   **`dei`**: Contains Document and Entity Information (DEI), providing basic company details.

    -   **`us-gaap`**: Holds financial data following the U.S. Generally Accepted Accounting Principles (GAAP).

Within these sections, financial data is organized as a list of items, each with specific attributes:

-   **Concept**: Represents a financial measure or item (e.g., "Assets") with an associated label and data type.

-   **Facts**: Actual numerical values associated with the concept, with attributes like "value," "unitRef," and "contextRef."

-   **Attributes**: Additional attributes providing context for the data, such as reporting period, currency unit, or data precision.

Effectively analyzing this data involves selecting relevant concepts and facts, potentially transforming or pivoting the data for further processing and visualization.

### Understanding the dataset: `company_Data`

Let's start by exploring the structure of **`company_Data`**:

```{r str_company_Data, eval=TRUE, message=FALSE,warning=FALSE}
# Visualize structure of the company_Data 
str(company_Data, max.level = 1)
```

The output reveals that **`company_Data`** comprises three lists with nested lists, such as **`company_Metadata`** with 22 lists.

::: {#Note_List .Note style="background-color: #f0f0f0; padding: 10px; color: gray"}

------------------------------------------------------------------------

*In R, a **list** is a versatile data structure capable of holding elements of different data types. It offers flexibility, allowing each element to be of a different type.*

*For **`company_Data`**, the list structure organizes various pieces of information, accommodating different data types. Understanding this structure is crucial for navigating and extracting specific information from complex datasets.*

------------------------------------------------------------------------
:::

To access the lists we use the symbol `$` in after the object e.g. `company_Data$company_Metadata`.

Next, we split the data into separate lists: **`company_Metadata`**, **`company_Facts`**, **`company_Concept`**.

```{r split_company_Data, eval=TRUE, warning=FALSE, message=FALSE}
# Split the lists in company_Data
company_Metadata <- company_Data$company_Metadata
company_Facts <- company_Data$company_Facts
company_Concept <- company_Data$company_Concept
```

Now, let's examine the structures and content of these lists:

#### Company Metadata

Let's start with `company_Metadata` which includes 22 elements: characters, integer, sub-list (or nested list), etc.

```{r view_company_Metadata, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Metadata
str(company_Metadata, max.level = 1)
```

The most relevant information of `company_Metadata` are included in the elemnent `filing` which is a nested list and contains the filing attributes.

```{r str_company_Metadata_Filing, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Metadata
str(company_Metadata$filing, max.level = 2)
```

The format of the dataset as printed is not very useful. We see that there are useful information on the forms (e.g. 10K) and dates (e.g. filing dates).

For now we will keep it as is and we will come back later on how to improve the readibility

#### Company Facts

`company_Facts` is relatively simple and is a list of 3 elements.

```{r view_company_Facts, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Facts
str(company_Facts, max.level = 1)
```

The last element `company_Facts$facts` is the most relevant one.

```{r view_company_Facts2, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Facts
str(company_Facts$facts, max.level = 1)
```

The **`us-gaap`** list is the most significant sub-element of facts, containing 498 nested sub-sub-elements. Let's examine the first five.

```{r str_company_Facts_us_gaap_head, eval=TRUE, warning=FALSE, message=FALSE}

# Visualize structure of the company_Facts
Facts_us_gaap <- str(company_Facts$facts$`us-gaap`[1:5], max.level = 1)
```

These sub-elements include essential fundamentals of the company and are themselves nested lists. Let's explore the structure of the first one.

```{r str_company_Facts_us_gaap, eval=TRUE, warning=FALSE, message=FALSE}

# Visualize structure of the company_Facts
str(company_Facts$facts$`us-gaap`[1], max.level = 4)
```

The output presents the structure of the information related to the first element: `AccountsPayable`

-   **AccountsPayable**: Represents a financial concept within the **`us-gaap`** section, specifically referring to "Accounts Payable (Deprecated 2009-01-31)."

    -   **`label`**: This column represents the financial concept or measure, such as "Accounts Payable (Deprecated 2009-01-31)."

    -   **`description`**: A detailed explanation of the concept, providing insight into the carrying value as of the balance sheet date.

    -   **`units`**: A data frame with 2 observations and 8 variables. The variables include information such as:

        -   `end`: Indicates the end date of the reporting period associated with the financial data.

        -   `val`: Represents the numerical value associated with the financial concept. It includes the unit of measure (e.g., million - "M").

        -   `accn`: Stands for accession number, a unique identifier assigned by the SEC to each submission.

        -   `fy`: Represents the fiscal year associated with the financial data

        -   `fp`: Represents the fiscal period (e.g., Q3 for the third quarter, FY for the full fiscal year).

        -   `form`: Indicates the type of form filed with the SEC (e.g., 10-Q for quarterly reports, 10-K for annual reports).

        -   `filed`: Represents the date on which the form was filed with the SEC.

        -   `frame` Provides information about the frame, and in this case, it appears to be a combination of calendar year, fiscal quarter, and an additional identifier. For instance "CY2008Q3I" suggests a possible combination of calendar year (CY), year (2008), fiscal quarter (Q3), and possibly an additional identifier ("I")

This hierarchical structure provides a detailed view of the financial concept "Accounts Payable (Deprecated 2009-01-31)" within the **`us-gaap`** section, including its label, description, and historical data with unit details.

::: {#Note_List2 .Note style="background-color: #f0f0f0; padding: 10px;"}

------------------------------------------------------------------------

*Most of the SEC data required for fundamentals analysis is included in a structure of nested lists. Its understanding is critical to properly retrieve the data. Once we automate the process of "un-nesting" the lists, we will be able to verify that this process led to a dataframe structure where the data is properly located.*

------------------------------------------------------------------------
:::

#### Company Concept

Finally, let's examine the structure associated with the company's Concept.

```{r str_company_Concept, eval=TRUE, warning=FALSE, message=FALSE}
# Visualize structure of the company_Concepts
str(company_Concept, max.level = 3)
```

The output shows the structure associated with the `Asset` of the company under the taxonomy of `us-gaap`.

### Rebuilding the financial reports

Let's create now a dataframe including the data retrieved from `` company_Facts$facts$`us-gaap` ``.

#### Un-nesting process

The first step is un-nest the dataset, in particular the financial data, in `company_Facts`, nested in sub-lists.

The following code can be used to un-nest the list within `company_Facts` and create a dataframe easy to visualize and useful for our purpose[^02_data_exploration-1].

[^02_data_exploration-1]: For visualization purpose we have omitted in `df_Facts` the column "description"

```{r unnesting_company_Facts, message=FALSE, warning=FALSE, message=FALSE}

df_Facts <- FactsList_to_Dataframe(company_Facts$facts$`us-gaap`)

# Select the columns to print out
df_Facts_selected_columns <- df_Facts %>%
  select(-description)

# Present the output with wrapped text and formatted numbers
df_Facts_selected_columns %>% head() %>%
  kable("html") %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, width = "150px")
```

The data in this dataframe is organized to facilitate analysis and comparison of financial information over different periods. Each row corresponds to a specific financial concept (e.g. Accounts Payable) reported by the company, and the columns provide details about the reporting period, values, and other relevant attributes.

#### Balancesheet

To create a standardized balance sheet from the data in `df_Facts`, we need to identify the relevant concepts associated with each part of the balancesheet. Here code to generate a standardized table the balancesheet:

```{r balancesheet_table, message=FALSE, warning=FALSE, message=FALSE}
# Define the list of concepts for the standardized balance sheet
balance_sheet_concepts <- c(
  "Cash, Cash Equivalent & Marketable Securities",
  "Total Accounts Receivable",
  "Total Inventories",
  "Other Current assets (to balance out the Total Current Assets)",
  "Total Current Assets",
  "Property, Plant and Equipment",
  "Investment & Advances",
  "Intangible Assets (excl. goodwill)",
  "Goodwill",
  "Other Long Term Assets (to balance out the Total Long-Term Assets)",
  "Total Long Term Assets",
  "Accounts Payable",
  "Tax Payable",
  "Other Account Payable (to balance out the Total Accounts Payable)",
  "Total Accounts Payable",
  "Short-Term Debt & Capital Leasing",
  "Deferred Tax And Revenue",
  "Other Current Liabilities (to balance out the Total Current Liabilities)",
  "Total Current Liabilities",
  "Long-Term Debts and Capital Leasing",
  "Other Long-term liabilities (to balance out the total Long-term liabilities)",
  "Total Long-Term liabilities",
  "Common Stock",
  "Retained Earnings",
  "Accumulated other comprehensive income (loss)",
  "Additional paid-in capital",
  "Other stockholders Equity (to balance out the Total Stockholders Equity)",
  "Total Stockholders Equity",
  "Minority interest",
  "Total Equity"
)

```

Next the code to extract from `df_Facts` the labels and corresponding descriptions which we will use to match with our standardized balancesheet.

```{r balancesheet_label_description, message=FALSE, warning=FALSE, message=FALSE}
# Create df_Facts_label_description with unique combinations of label and description
df_Facts_label_description <- df_Facts %>%
  select(label, description) %>%
  distinct()

# Display the first few rows of df_Facts_label_description
head(df_Facts_label_description) %>% kable()

```

This code selects the label and description columns from `df_Facts`, removes duplicate rows using the distinct function, and stores the result in the new dataframe `df_Facts_label_description`. The head function is then used to display the first few rows of the new dataframe.

#### Income Statement

#### Cash Flow
